{-# OPTIONS --postfix-projections --safe #-}

module StandardSemantics where

open import Level using (Lift; lift; lower)
open import Data.Bool using (true; false; _‚àß_; _‚à®_; not)
                   renaming (Bool to ùîπ; if_then_else_ to if·µá_then_else_)
open import Data.Fin using (Fin)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_√ó_; _,_)
open import Data.Rational using (‚Ñö; _‚â§·µá_) renaming (_+_ to _+‚Ñö_; _*_ to _*‚Ñö_)
open import Data.Unit using (‚ä§; tt)

open import MiniVehicle

‚ü¶_‚üßkind : Kind ‚Üí Set‚ÇÅ
‚ü¶ Nat ‚üßkind  = Lift _ ‚Ñï
‚ü¶ Type ‚üßkind = Set

‚ü¶_‚üßkctxt : KindContext ‚Üí Set
‚ü¶ Œµ ‚üßkctxt      = ‚ä§
‚ü¶ Œî ,-‚Ñï ‚üßkctxt = ‚ü¶ Œî ‚üßkctxt √ó ‚Ñï

‚ü¶_‚üßty : ‚àÄ {Œî Œ∫} ‚Üí Œî ‚ä¢T Œ∫ ‚Üí ‚ü¶ Œî ‚üßkctxt ‚Üí ‚ü¶ Œ∫ ‚üßkind
‚ü¶ Bool constraint ‚üßty Œ¥ = ùîπ
‚ü¶ Num x ‚üßty           Œ¥ = ‚Ñö
‚ü¶ A ‚áí B ‚üßty          Œ¥ = ‚ü¶ A ‚üßty Œ¥ ‚Üí ‚ü¶ B ‚üßty Œ¥
‚ü¶ Index n ‚üßty         Œ¥ = Fin (‚ü¶ n ‚üßty Œ¥ .lower)
‚ü¶ Array n A ‚üßty       Œ¥ = Fin (‚ü¶ n ‚üßty Œ¥ .lower) ‚Üí ‚ü¶ A ‚üßty Œ¥

‚ü¶_‚üßctxt : ‚àÄ {Œî} ‚Üí Context Œî ‚Üí ‚ü¶ Œî ‚üßkctxt ‚Üí Set
‚ü¶ Œµ ‚üßctxt      Œ¥ = ‚ä§
‚ü¶ Œì ,- A ‚üßctxt Œ¥ = ‚ü¶ Œì ‚üßctxt Œ¥ √ó ‚ü¶ A ‚üßty Œ¥

‚ü¶_‚üßvar : ‚àÄ {Œî Œì A} ‚Üí Œî ‚ä¢ Œì ‚àã A ‚Üí ‚àÄ Œ¥ ‚Üí ‚ü¶ Œì ‚üßctxt Œ¥ ‚Üí ‚ü¶ A ‚üßty Œ¥
‚ü¶ zero ‚üßvar   Œ¥ (_ , a) = a
‚ü¶ succ x ‚üßvar Œ¥ (Œ≥ , _) = ‚ü¶ x ‚üßvar Œ¥ Œ≥

module TermSem (f : ‚Ñö ‚Üí ‚Ñö) where

  ‚ü¶_‚üßtm : ‚àÄ {Œî Œì A} ‚Üí Œî / Œì ‚ä¢ A ‚Üí ‚àÄ Œ¥ ‚Üí ‚ü¶ Œì ‚üßctxt Œ¥ ‚Üí ‚ü¶ A ‚üßty Œ¥
  ‚ü¶ var x ‚üßtm Œ¥ Œ≥ = ‚ü¶ x ‚üßvar Œ¥ Œ≥
  ‚ü¶ ∆õ t ‚üßtm Œ¥ Œ≥ = Œª a ‚Üí ‚ü¶ t ‚üßtm Œ¥ (Œ≥ , a)
  ‚ü¶ s ‚àô t ‚üßtm Œ¥ Œ≥ = ‚ü¶ s ‚üßtm Œ¥ Œ≥ (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ func t ‚üßtm Œ¥ Œ≥ = f (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ const x ‚üßtm Œ¥ Œ≥ = x
  ‚ü¶ lift t ‚üßtm Œ¥ Œ≥ = ‚ü¶ t ‚üßtm Œ¥ Œ≥
  ‚ü¶ s `+ t ‚üßtm Œ¥ Œ≥ = (‚ü¶ s ‚üßtm Œ¥ Œ≥) +‚Ñö (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ s `* t ‚üßtm Œ¥ Œ≥ = (‚ü¶ s ‚üßtm Œ¥ Œ≥) *‚Ñö (‚ü¶ t ‚üßtm Œ¥ Œ≥)

  ‚ü¶ array n A t ‚üßtm Œ¥ Œ≥ = Œª idx ‚Üí ‚ü¶ t ‚üßtm Œ¥ (Œ≥ , idx)
  ‚ü¶ index n A s t ‚üßtm Œ¥ Œ≥ = ‚ü¶ s ‚üßtm Œ¥ Œ≥ (‚ü¶ t ‚üßtm Œ¥ Œ≥)

  ‚ü¶ s `‚â§ t ‚üßtm Œ¥ Œ≥  = (‚ü¶ s ‚üßtm Œ¥ Œ≥) ‚â§·µá (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ if s then t else u ‚üßtm Œ¥ Œ≥ = if·µá (‚ü¶ s ‚üßtm Œ¥ Œ≥) then (‚ü¶ t ‚üßtm Œ¥ Œ≥) else (‚ü¶ u ‚üßtm Œ¥ Œ≥)
  ‚ü¶ `¬¨ t ‚üßtm Œ¥ Œ≥ = not (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ s `‚àß t ‚üßtm Œ¥ Œ≥ = (‚ü¶ s ‚üßtm Œ¥ Œ≥) ‚àß (‚ü¶ t ‚üßtm Œ¥ Œ≥)
  ‚ü¶ s `‚à® t ‚üßtm Œ¥ Œ≥ = (‚ü¶ s ‚üßtm Œ¥ Œ≥) ‚à® (‚ü¶ t ‚üßtm Œ¥ Œ≥)
