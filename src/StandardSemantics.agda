{-# OPTIONS --postfix-projections #-}

module StandardSemantics where

open import Level using (0‚Ñì; suc)
open import Data.Bool using (true; false; _‚àß_; _‚à®_; not) renaming (Bool to ùîπ; T to True)
open import Data.Fin using (Fin)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax)
open import Data.Rational using (‚Ñö; _‚â§·µá_) renaming (_+_ to _+‚Ñö_; _*_ to _*‚Ñö_)
open import Data.Unit using (‚ä§; tt)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; trans; cong; sym; cong‚ÇÇ)

open import MiniVehicle
open import Interpretation

data Ex (A : Set) : Set where
  return : A ‚Üí Ex A
  ex     : (‚Ñö ‚Üí Ex A) ‚Üí Ex A

bind-Ex : ‚àÄ {A B} ‚Üí Ex A ‚Üí (A ‚Üí Ex B) ‚Üí Ex B
bind-Ex (return x) k = k x
bind-Ex (ex x) k = ex (Œª q ‚Üí bind-Ex (x q) k)

eval-Ex : ‚àÄ {A} ‚Üí Ex A ‚Üí (A ‚Üí Set) ‚Üí Set
eval-Ex (return x) k = k x
eval-Ex (ex x)     k = Œ£[ q ‚àà ‚Ñö ] eval-Ex (x q) k

module _ (extFunc : ‚Ñö ‚Üí ‚Ñö) where
  open Model

  ‚Ñ≥ : Model (suc 0‚Ñì) 0‚Ñì
  ‚Ñ≥ .‚ü¶Type‚üß = Set
  ‚Ñ≥ ._==>_ X Y = X ‚Üí Y
  ‚Ñ≥ .‚ü¶id‚üß = Œª x ‚Üí x
  ‚Ñ≥ ._‚àò_ f g x = f (g x)
  ‚Ñ≥ ._‚ü¶√ó‚üß_ = _√ó_
  ‚Ñ≥ .‚ü¶‚ä§‚üß = ‚ä§
  ‚Ñ≥ .‚ü¶terminal‚üß x = tt
  ‚Ñ≥ .‚ü¶proj‚ÇÅ‚üß = proj‚ÇÅ
  ‚Ñ≥ .‚ü¶proj‚ÇÇ‚üß = proj‚ÇÇ
  ‚Ñ≥ .‚ü®_,_‚ü© f g x = f x , g x
  ‚Ñ≥ ._‚ü¶‚áí‚üß_ X Y = X ‚Üí Y
  ‚Ñ≥ .‚ü¶Œõ‚üß f x y = f (x , y)
  ‚Ñ≥ .‚ü¶eval‚üß (f , x) = f x
  ‚Ñ≥ .‚ü¶‚àÄ‚üß A = ‚àÄ n ‚Üí A n
  ‚Ñ≥ .‚ü¶‚àÄ-intro‚üß f x n = f n x
  ‚Ñ≥ .‚ü¶‚àÄ-elim‚üß n f = f n
  ‚Ñ≥ .Mon X = X
  ‚Ñ≥ .‚ü¶return‚üß x = x
  ‚Ñ≥ .‚ü¶extend‚üß f = f
  ‚Ñ≥ .‚ü¶Num‚üß _ = ‚Ñö
  ‚Ñ≥ .‚ü¶add‚üß (x , y)  = x +‚Ñö y
  ‚Ñ≥ .‚ü¶mul‚üß (x , y)  = x *‚Ñö y
  ‚Ñ≥ .‚ü¶num‚üß q _  = q
  ‚Ñ≥ .‚ü¶const‚üß q = q
  ‚Ñ≥ .‚ü¶extFunc‚üß x  = extFunc (x )
  ‚Ñ≥ .‚ü¶Bool‚üß constraint = ùîπ
  ‚Ñ≥ .‚ü¶Bool‚üß query = Ex ùîπ
  ‚Ñ≥ .‚ü¶not‚üß x  = not x
  ‚Ñ≥ .‚ü¶and‚üß (x , y)  = x  ‚àß y
  ‚Ñ≥ .‚ü¶or‚üß (x , y)  = x  ‚à® y
  ‚Ñ≥ .‚ü¶‚â§‚üß (q‚ÇÅ , q‚ÇÇ)  = q‚ÇÅ  ‚â§·µá q‚ÇÇ
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , false) = fa
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , true) = tr
  ‚Ñ≥ .‚ü¶Index‚üß i = Fin i
  ‚Ñ≥ .‚ü¶idx‚üß _ i _  = i
  ‚Ñ≥ .‚ü¶constraint‚üß x = return x
  ‚Ñ≥ .‚ü¶‚àÉ‚üß f = ex f
