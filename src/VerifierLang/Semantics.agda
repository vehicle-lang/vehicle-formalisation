{-# OPTIONS --safe #-}

open import Data.Bool
       using (Bool; true; false; _‚àß_; _‚à®_; if_then_else_; not)
       renaming (T to True)
open import Data.Bool.Properties using (not-involutive; ‚à®-‚àß-booleanAlgebra)
open import Algebra.Lattice.Properties.BooleanAlgebra ‚à®-‚àß-booleanAlgebra using (deMorgan‚ÇÅ; deMorgan‚ÇÇ)
open import Data.Product using (Œ£-syntax; _√ó_)
open import Data.Sum using (_‚äé_)
open import Data.Rational as ‚Ñö using (‚Ñö; 1‚Ñö; _*_; _+_; _‚â§·µá_; _‚âü_)
open import Data.Rational.Properties using (*-assoc; *-distribÀ°-+)
open import Function.Base using (id)
open import Relation.Nullary using (¬¨_; does)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong‚ÇÇ; cong)
open import Util using (_<·µá_)
open import Util.EquiInhabited

open import VerifierLang.Syntax

module VerifierLang.Semantics (extFunc : ‚Ñö ‚Üí ‚Ñö) where

------------------------------------------------------------------------------
-- Environments in which evaluation is performed

Env : LinVarCtxt ‚Üí Set
Env Œî = Var Œî ‚Üí ‚Ñö

empty-env : Env Œµ
empty-env ()

extend-env : ‚àÄ {Œî} ‚Üí Env Œî ‚Üí ‚Ñö ‚Üí Env (Œî ,‚àô)
extend-env Œ∑ q zero     = q
extend-env Œ∑ q (succ x) = Œ∑ x

------------------------------------------------------------------------------
-- Evaluation of linear expressions

‚Ñ∞‚ü¶_‚üß : ‚àÄ {Œî} ‚Üí LinExp Œî ‚Üí Env Œî ‚Üí ‚Ñö
‚Ñ∞‚ü¶ const q ‚üß    Œ∑ = q
‚Ñ∞‚ü¶ q `*`var x ‚üß Œ∑ = q * Œ∑ x
‚Ñ∞‚ü¶ e‚ÇÅ `+` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ + ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑

------------------------------------------------------------------------------
-- Evaluation of constraints

ùíû‚ü¶_‚üß : ‚àÄ {Œî} ‚Üí Constraint Œî ‚Üí Env Œî ‚Üí Bool
ùíû‚ü¶ e‚ÇÅ `‚â§` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚â§·µá ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑
ùíû‚ü¶ e‚ÇÅ `<` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ <·µá ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑
ùíû‚ü¶ e‚ÇÅ `=` e‚ÇÇ ‚üß  Œ∑ = (‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚âü ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑) .does
ùíû‚ü¶ e‚ÇÅ `‚â†` e‚ÇÇ ‚üß  Œ∑ = not ((‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚âü ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑) .does)
ùíû‚ü¶ x‚ÇÅ `=`f x‚ÇÇ ‚üß Œ∑ = (Œ∑ x‚ÇÅ ‚âü extFunc (Œ∑ x‚ÇÇ)) .does
ùíû‚ü¶ x‚ÇÅ `‚â†`f x‚ÇÇ ‚üß Œ∑ = not ((Œ∑ x‚ÇÅ ‚âü extFunc (Œ∑ x‚ÇÇ)) .does)

------------------------------------------------------------------------------
-- Evaluation of query bodies

eval-QueryBody : ‚àÄ {Œî} ‚Üí QueryBody Œî ‚Üí Env Œî ‚Üí Bool
eval-QueryBody (constraint œï) Œ∑ = ùíû‚ü¶ œï ‚üß Œ∑
eval-QueryBody (œï‚ÇÅ and œï‚ÇÇ)    Œ∑ = eval-QueryBody œï‚ÇÅ Œ∑ ‚àß eval-QueryBody œï‚ÇÇ Œ∑

------------------------------------------------------------------------------
-- Evaluation of constraints

eval-Query : ‚àÄ {Œî} ‚Üí Query Œî ‚Üí Env Œî ‚Üí Set
eval-Query (body œï) Œ∑ = True (eval-QueryBody œï Œ∑)
eval-Query (ex œï) Œ∑ = Œ£[ q ‚àà ‚Ñö ] (eval-Query œï (extend-env Œ∑ q))

eval-QuerySet : ‚àÄ {Œî} ‚Üí QuerySet Œî ‚Üí Env Œî ‚Üí Set
eval-QuerySet (query x) Œ∑ = eval-Query x Œ∑
eval-QuerySet (œï or œï‚ÇÇ) Œ∑ = eval-QuerySet œï Œ∑ ‚äé eval-QuerySet œï‚ÇÇ Œ∑

eval-QueryTree : QueryTree ‚Üí Set
eval-QueryTree (querySet negated x‚ÇÅ) = (if negated then ¬¨_ else id) (eval-QuerySet x‚ÇÅ empty-env)
eval-QueryTree (t or t‚ÇÅ) = eval-QueryTree t ‚äé eval-QueryTree t‚ÇÅ
eval-QueryTree (t and t‚ÇÅ) = eval-QueryTree t √ó eval-QueryTree t‚ÇÅ

eval-‚äõ : ‚àÄ {Œî} q (e : LinExp Œî) Œ∑ ‚Üí q * ‚Ñ∞‚ü¶ e ‚üß Œ∑ ‚â° ‚Ñ∞‚ü¶ q ‚äõ e ‚üß Œ∑
eval-‚äõ q (const x) Œ∑ = refl
eval-‚äõ q (r `*`var x) Œ∑ = sym (*-assoc q r (Œ∑ x))
eval-‚äõ q (e‚ÇÅ `+` e‚ÇÇ) Œ∑ rewrite sym (eval-‚äõ q e‚ÇÅ Œ∑) rewrite sym (eval-‚äõ q e‚ÇÇ Œ∑) =
  *-distribÀ°-+ q (‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑) (‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑)

------------------------------------------------------------------------------
-- Evaluation contexts

record World : Set where
  field
    ctxt : LinVarCtxt
    env  : Env ctxt
open World public

empty : World
empty .ctxt = Œµ
empty .env = empty-env

-- World morphisms extend the context whilst making sure that the
-- environment is preserved.
record _‚áíw_ (w‚ÇÅ w‚ÇÇ : World) : Set where
  field
    ren   : w‚ÇÅ .ctxt ‚áí·µ£ w‚ÇÇ .ctxt
    presv : ‚àÄ x ‚Üí w‚ÇÅ .env (ren x) ‚â° w‚ÇÇ .env x
open _‚áíw_ public

id-w : ‚àÄ {w} ‚Üí w ‚áíw w
id-w .ren x = x
id-w .presv x = refl

_‚àòw_ : ‚àÄ {w‚ÇÅ w‚ÇÇ w‚ÇÉ} ‚Üí w‚ÇÇ ‚áíw w‚ÇÉ ‚Üí w‚ÇÅ ‚áíw w‚ÇÇ ‚Üí w‚ÇÅ ‚áíw w‚ÇÉ
(f ‚àòw g) .ren x = g .ren (f .ren x)
(f ‚àòw g) .presv x = trans (g .presv (f .ren x)) (f .presv x)

extend-w : World ‚Üí ‚Ñö ‚Üí World
extend-w w q .ctxt = w .ctxt ,‚àô
extend-w w q .env = extend-env (w .env) q

under-w : ‚àÄ {w‚ÇÅ w‚ÇÇ q} ‚Üí (w‚ÇÅ ‚áíw w‚ÇÇ) ‚Üí (extend-w w‚ÇÅ q ‚áíw extend-w w‚ÇÇ q)
under-w œÅ .ren = under (œÅ .ren)
under-w œÅ .presv zero = refl
under-w œÅ .presv (succ x) = œÅ .presv x

under-w' : ‚àÄ {w‚ÇÅ w‚ÇÇ q‚ÇÅ q‚ÇÇ} ‚Üí (q‚ÇÅ ‚â° q‚ÇÇ) ‚Üí (w‚ÇÅ ‚áíw w‚ÇÇ) ‚Üí (extend-w w‚ÇÅ q‚ÇÅ ‚áíw extend-w w‚ÇÇ q‚ÇÇ)
under-w' eq œÅ .ren = under (œÅ .ren)
under-w' eq œÅ .presv zero = eq
under-w' eq œÅ .presv (succ x) = œÅ .presv x

wk-w : ‚àÄ {w q} ‚Üí extend-w w q ‚áíw w
wk-w .ren = succ
wk-w .presv x = refl

------------------------------------------------------------------------------
-- Evaluation is preserved under extension of the evaluation context

ext-evalLinExp :
  ‚àÄ {w‚ÇÅ w‚ÇÇ} e (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) ‚Üí
    ‚Ñ∞‚ü¶ e ‚üß (w‚ÇÅ .env) ‚â° ‚Ñ∞‚ü¶ rename-LinExp (œÅ .ren) e ‚üß (w‚ÇÇ .env)
ext-evalLinExp (const q)    œÅ = refl
ext-evalLinExp (q `*`var x) œÅ = cong (Œª ‚ñ° ‚Üí q * ‚ñ°) (sym (œÅ .presv x))
ext-evalLinExp (e‚ÇÅ `+` e‚ÇÇ)  œÅ = cong‚ÇÇ _+_ (ext-evalLinExp e‚ÇÅ œÅ) (ext-evalLinExp e‚ÇÇ œÅ)

ext-evalConstraint :
  ‚àÄ {w‚ÇÅ w‚ÇÇ} p (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) ‚Üí
    ùíû‚ü¶ p ‚üß (w‚ÇÅ .env) ‚â° ùíû‚ü¶ rename-Constraint (œÅ .ren) p ‚üß (w‚ÇÇ .env)
ext-evalConstraint (e‚ÇÅ `‚â§` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ | ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `<` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ | ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `=` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ | ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `‚â†` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ | ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (x `=`f y)  œÅ rewrite œÅ .presv x | œÅ .presv y = refl
ext-evalConstraint (x `‚â†`f y)  œÅ rewrite œÅ .presv x | œÅ .presv y = refl

ext-evalQueryBody : 
  ‚àÄ {w‚ÇÅ w‚ÇÇ} œï (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) ‚Üí
    eval-QueryBody œï (w‚ÇÅ .env) ‚â° eval-QueryBody (rename-QueryBody (œÅ .ren) œï) (w‚ÇÇ .env)
ext-evalQueryBody (constraint œï) œÅ rewrite ext-evalConstraint œï œÅ = refl
ext-evalQueryBody (œï‚ÇÅ and œï‚ÇÇ)    œÅ rewrite ext-evalQueryBody œï‚ÇÅ œÅ | ext-evalQueryBody œï‚ÇÇ œÅ = refl

ext-evalQuery : ‚àÄ {w‚ÇÅ w‚ÇÇ} (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) œï ‚Üí
                eval-Query œï (w‚ÇÅ .env) ‚áî
                   eval-Query (rename-Query (œÅ .ren) œï) (w‚ÇÇ .env)
ext-evalQuery œÅ (body œï) = cong-True (ext-evalQueryBody œï œÅ)
ext-evalQuery œÅ (ex œï) = cong-‚àÉ Œª q ‚Üí ext-evalQuery (under-w œÅ) œï
