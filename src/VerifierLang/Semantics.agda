{-# OPTIONS --safe #-}

open import Data.Bool
       using (Bool; true; false; _‚àß_; _‚à®_; if_then_else_; not)
       renaming (T to True)
open import Data.Bool.Properties using (not-involutive; ‚à®-‚àß-booleanAlgebra)
open import Algebra.Properties.BooleanAlgebra ‚à®-‚àß-booleanAlgebra using (deMorgan‚ÇÅ; deMorgan‚ÇÇ)
open import Data.Product using (Œ£-syntax; _√ó_)
open import Data.Sum using (_‚äé_)
open import Data.Rational as ‚Ñö using (‚Ñö; 1‚Ñö; _*_; _+_; _‚â§·µá_; _‚âü_)
open import Data.Rational.Properties using (*-assoc; *-distribÀ°-+)
open import Relation.Nullary using (does)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong‚ÇÇ; cong)
open import Util using (_<·µá_)
open import EquiInhabited

open import VerifierLang.Syntax

module VerifierLang.Semantics (extFunc : ‚Ñö ‚Üí ‚Ñö) where

Env : LinVarCtxt ‚Üí Set
Env Œî = Var Œî ‚Üí ‚Ñö

empty-env : Env Œµ
empty-env ()

extend-env : ‚àÄ {Œî} ‚Üí Env Œî ‚Üí ‚Ñö ‚Üí Env (Œî ,‚àô)
extend-env Œ∑ q zero     = q
extend-env Œ∑ q (succ x) = Œ∑ x

‚Ñ∞‚ü¶_‚üß : ‚àÄ {Œî} ‚Üí LinExp Œî ‚Üí Env Œî ‚Üí ‚Ñö
‚Ñ∞‚ü¶ const q ‚üß    Œ∑ = q
‚Ñ∞‚ü¶ q `*`var x ‚üß Œ∑ = q * Œ∑ x
‚Ñ∞‚ü¶ e‚ÇÅ `+` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ + ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑

eval-‚äõ : ‚àÄ {Œî} q (e : LinExp Œî) Œ∑ ‚Üí q * ‚Ñ∞‚ü¶ e ‚üß Œ∑ ‚â° ‚Ñ∞‚ü¶ q ‚äõ e ‚üß Œ∑
eval-‚äõ q (const x) Œ∑ = refl
eval-‚äõ q (r `*`var x) Œ∑ = sym (*-assoc q r (Œ∑ x))
eval-‚äõ q (e‚ÇÅ `+` e‚ÇÇ) Œ∑ rewrite sym (eval-‚äõ q e‚ÇÅ Œ∑) rewrite sym (eval-‚äõ q e‚ÇÇ Œ∑) =
  *-distribÀ°-+ q (‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑) (‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑)

ùíû‚ü¶_‚üß : ‚àÄ {Œî} ‚Üí Constraint Œî ‚Üí Env Œî ‚Üí Bool
ùíû‚ü¶ e‚ÇÅ `‚â§` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚â§·µá ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑
ùíû‚ü¶ e‚ÇÅ `<` e‚ÇÇ ‚üß  Œ∑ = ‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ <·µá ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑
ùíû‚ü¶ e‚ÇÅ `=` e‚ÇÇ ‚üß  Œ∑ = (‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚âü ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑) .does
ùíû‚ü¶ e‚ÇÅ `‚â†` e‚ÇÇ ‚üß  Œ∑ = not ((‚Ñ∞‚ü¶ e‚ÇÅ ‚üß Œ∑ ‚âü ‚Ñ∞‚ü¶ e‚ÇÇ ‚üß Œ∑) .does)
ùíû‚ü¶ p and q ‚üß    Œ∑ = ùíû‚ü¶ p ‚üß Œ∑ ‚àß ùíû‚ü¶ q ‚üß Œ∑
ùíû‚ü¶ p or q ‚üß     Œ∑ = ùíû‚ü¶ p ‚üß Œ∑ ‚à® ùíû‚ü¶ q ‚üß Œ∑
ùíû‚ü¶ x‚ÇÅ `=`f x‚ÇÇ ‚üß Œ∑ = (Œ∑ x‚ÇÅ ‚âü extFunc (Œ∑ x‚ÇÇ)) .does
ùíû‚ü¶ x‚ÇÅ `‚â†`f x‚ÇÇ ‚üß Œ∑ = not ((Œ∑ x‚ÇÅ ‚âü extFunc (Œ∑ x‚ÇÇ)) .does)

eval-negate : ‚àÄ {Œî} (p : Constraint Œî) Œ∑ ‚Üí not (ùíû‚ü¶ p ‚üß Œ∑) ‚â° ùíû‚ü¶ negate p ‚üß Œ∑
eval-negate (x `‚â§` x‚ÇÅ) Œ∑ = refl
eval-negate (x `<` x‚ÇÅ) Œ∑ = not-involutive _
eval-negate (x `=` x‚ÇÅ) Œ∑ = refl
eval-negate (x `‚â†` x‚ÇÅ) Œ∑ = not-involutive _
eval-negate (p and q)  Œ∑ rewrite sym (eval-negate p Œ∑)
                         rewrite sym (eval-negate q Œ∑) =
                            deMorgan‚ÇÅ (ùíû‚ü¶ p ‚üß Œ∑) (ùíû‚ü¶ q ‚üß Œ∑)
eval-negate (p or q)   Œ∑ rewrite sym (eval-negate p Œ∑)
                         rewrite sym (eval-negate q Œ∑) =
                            deMorgan‚ÇÇ (ùíû‚ü¶ p ‚üß Œ∑) (ùíû‚ü¶ q ‚üß Œ∑)
eval-negate (x‚ÇÅ `=`f x‚ÇÇ) Œ∑ = refl
eval-negate (x‚ÇÅ `‚â†`f x‚ÇÇ) Œ∑ = not-involutive _

eval-ExFormula : ‚àÄ {Œî} ‚Üí ExFormula Œî ‚Üí Env Œî ‚Üí Set
eval-ExFormula (constraint œï) Œ∑ = True (ùíû‚ü¶ œï ‚üß Œ∑)
eval-ExFormula (ex œï) Œ∑ = Œ£[ q ‚àà ‚Ñö ] eval-ExFormula œï (extend-env Œ∑ q)
eval-ExFormula (œï and œà) Œ∑ = eval-ExFormula œï Œ∑ √ó eval-ExFormula œà Œ∑
eval-ExFormula (œï or œà) Œ∑ = eval-ExFormula œï Œ∑ ‚äé eval-ExFormula œà Œ∑

eval-PrenexFormula : ‚àÄ {Œî} ‚Üí PrenexFormula Œî ‚Üí Env Œî ‚Üí Set
eval-PrenexFormula (constraint œï) Œ∑ = True (ùíû‚ü¶ œï ‚üß Œ∑)
eval-PrenexFormula (ex œï) Œ∑ = Œ£[ q ‚àà ‚Ñö ] (eval-PrenexFormula œï (extend-env Œ∑ q))

------------------------------------------------------------------------------
-- Evaluation contexts

record World : Set where
  field
    ctxt : LinVarCtxt
    env  : Env ctxt
open World public

empty : World
empty .ctxt = Œµ
empty .env = empty-env

-- World morphisms extend the context whilst making sure that the
-- environment is preserved.
record _‚áíw_ (w‚ÇÅ w‚ÇÇ : World) : Set where
  field
    ren   : w‚ÇÅ .ctxt ‚áí·µ£ w‚ÇÇ .ctxt
    presv : ‚àÄ x ‚Üí w‚ÇÅ .env (ren x) ‚â° w‚ÇÇ .env x
open _‚áíw_ public

id-w : ‚àÄ {w} ‚Üí w ‚áíw w
id-w .ren x = x
id-w .presv x = refl

_‚àòw_ : ‚àÄ {w‚ÇÅ w‚ÇÇ w‚ÇÉ} ‚Üí w‚ÇÇ ‚áíw w‚ÇÉ ‚Üí w‚ÇÅ ‚áíw w‚ÇÇ ‚Üí w‚ÇÅ ‚áíw w‚ÇÉ
(f ‚àòw g) .ren x = g .ren (f .ren x)
(f ‚àòw g) .presv x = trans (g .presv (f .ren x)) (f .presv x)

extend-w : World ‚Üí ‚Ñö ‚Üí World
extend-w w q .ctxt = w .ctxt ,‚àô
extend-w w q .env = extend-env (w .env) q

under-w : ‚àÄ {w‚ÇÅ w‚ÇÇ q} ‚Üí (w‚ÇÅ ‚áíw w‚ÇÇ) ‚Üí (extend-w w‚ÇÅ q ‚áíw extend-w w‚ÇÇ q)
under-w œÅ .ren = under (œÅ .ren)
under-w œÅ .presv zero = refl
under-w œÅ .presv (succ x) = œÅ .presv x

under-w' : ‚àÄ {w‚ÇÅ w‚ÇÇ q‚ÇÅ q‚ÇÇ} ‚Üí (q‚ÇÅ ‚â° q‚ÇÇ) ‚Üí (w‚ÇÅ ‚áíw w‚ÇÇ) ‚Üí (extend-w w‚ÇÅ q‚ÇÅ ‚áíw extend-w w‚ÇÇ q‚ÇÇ)
under-w' eq œÅ .ren = under (œÅ .ren)
under-w' eq œÅ .presv zero = eq
under-w' eq œÅ .presv (succ x) = œÅ .presv x

wk-w : ‚àÄ {w q} ‚Üí extend-w w q ‚áíw w
wk-w .ren = succ
wk-w .presv x = refl

------------------------------------------------------------------------------
-- Evaluation is preserved under extension of the evaluation context

ext-evalLinExp :
  ‚àÄ {w‚ÇÅ w‚ÇÇ} e (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) ‚Üí
    ‚Ñ∞‚ü¶ e ‚üß (w‚ÇÅ .env) ‚â° ‚Ñ∞‚ü¶ rename-LinExp (œÅ .ren) e ‚üß (w‚ÇÇ .env)
ext-evalLinExp (const q)    œÅ = refl
ext-evalLinExp (q `*`var x) œÅ = cong (Œª ‚ñ° ‚Üí q * ‚ñ°) (sym (œÅ .presv x))
ext-evalLinExp (e‚ÇÅ `+` e‚ÇÇ)  œÅ = cong‚ÇÇ _+_ (ext-evalLinExp e‚ÇÅ œÅ) (ext-evalLinExp e‚ÇÇ œÅ)

ext-evalConstraint :
  ‚àÄ {w‚ÇÅ w‚ÇÇ} p (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) ‚Üí
    ùíû‚ü¶ p ‚üß (w‚ÇÅ .env) ‚â° ùíû‚ü¶ rename-Constraint (œÅ .ren) p ‚üß (w‚ÇÇ .env)
ext-evalConstraint (e‚ÇÅ `‚â§` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ rewrite ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `<` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ rewrite ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `=` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ rewrite ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (e‚ÇÅ `‚â†` e‚ÇÇ) œÅ rewrite ext-evalLinExp e‚ÇÅ œÅ rewrite ext-evalLinExp e‚ÇÇ œÅ = refl
ext-evalConstraint (p and q)   œÅ rewrite ext-evalConstraint p œÅ rewrite ext-evalConstraint q œÅ = refl
ext-evalConstraint (p or q)    œÅ rewrite ext-evalConstraint p œÅ rewrite ext-evalConstraint q œÅ = refl
ext-evalConstraint (x `=`f y)  œÅ rewrite œÅ .presv x rewrite œÅ .presv y = refl
ext-evalConstraint (x `‚â†`f y)  œÅ rewrite œÅ .presv x rewrite œÅ .presv y = refl

ext-PrenexFormula : ‚àÄ {w‚ÇÅ w‚ÇÇ} (œÅ : w‚ÇÇ ‚áíw w‚ÇÅ) œï ‚Üí
                eval-PrenexFormula œï (w‚ÇÅ .env) ‚áî
                   eval-PrenexFormula (rename-PrenexFormula (œÅ .ren) œï) (w‚ÇÇ .env)
ext-PrenexFormula œÅ (constraint œï) = cong-True (ext-evalConstraint œï œÅ)
ext-PrenexFormula œÅ (ex œï) = cong-‚àÉ Œª q ‚Üí ext-PrenexFormula (under-w œÅ) œï

------------------------------------------------------------------------------
equi-conj-constraint : ‚àÄ {Œî} (œï : Constraint Œî) œà Œ∑ ‚Üí
                       (True (ùíû‚ü¶ œï ‚üß Œ∑) √ó eval-PrenexFormula œà Œ∑)
                          ‚áî eval-PrenexFormula (conj-constraint œï œà) Œ∑
equi-conj-constraint œï (constraint x) Œ∑ = True-‚àß
equi-conj-constraint œï (ex œà) Œ∑ =
  ‚áî-trans
    and-comm-left
    (‚áî-trans
     (cong-‚àÉ Œª q ‚Üí √ó-cong (cong-True (ext-evalConstraint œï wk-w)) ‚áî-refl)
     (cong-‚àÉ Œª q ‚Üí
        equi-conj-constraint (rename-Constraint succ œï) œà (extend-env Œ∑ q)))

equi-conj : ‚àÄ {Œî} (œï : PrenexFormula Œî) œà Œ∑ ‚Üí
            (eval-PrenexFormula œï Œ∑ √ó eval-PrenexFormula œà Œ∑) ‚áî eval-PrenexFormula (conj œï œà) Œ∑
equi-conj (constraint œï) œà Œ∑ = equi-conj-constraint œï œà Œ∑
equi-conj (ex œï) œà Œ∑ =
  ‚áî-trans
   and-comm-right
   (cong-‚àÉ Œª q ‚Üí
    ‚áî-trans
     (√ó-cong ‚áî-refl (ext-PrenexFormula wk-w œà))
     (equi-conj œï (rename-PrenexFormula succ œà) (extend-env Œ∑ q)))

equi-disj-constraint : ‚àÄ {Œî} (œï : Constraint Œî) œà Œ∑ ‚Üí
                       (True (ùíû‚ü¶ œï ‚üß Œ∑) ‚äé eval-PrenexFormula œà Œ∑)
                          ‚áî eval-PrenexFormula (disj-constraint œï œà) Œ∑
equi-disj-constraint œï (constraint x) Œ∑ = True-‚à®
equi-disj-constraint œï (ex œà) Œ∑ =
  ‚áî-trans
   (or-comm-right 1‚Ñö)
   (cong-‚àÉ
    Œª q ‚Üí ‚áî-trans
           (‚äé-cong (cong-True (ext-evalConstraint œï wk-w)) ‚áî-refl)
           (equi-disj-constraint (rename-Constraint succ œï) œà (extend-env Œ∑ q)))

equi-disj : ‚àÄ {Œî} (œï : PrenexFormula Œî) œà Œ∑ ‚Üí
            (eval-PrenexFormula œï Œ∑ ‚äé eval-PrenexFormula œà Œ∑) ‚áî eval-PrenexFormula (disj œï œà) Œ∑
equi-disj (constraint œï) œà Œ∑ = equi-disj-constraint œï œà Œ∑
equi-disj (ex œï) œà Œ∑ =
  ‚áî-trans (or-comm-left 1‚Ñö)
   (cong-‚àÉ Œª q ‚Üí
    ‚áî-trans
     (‚äé-cong ‚áî-refl (ext-PrenexFormula wk-w œà))
     (equi-disj œï (rename-PrenexFormula succ œà) (extend-env Œ∑ q)))

toPrenexForm-ok : ‚àÄ {Œî} (œï : ExFormula Œî) Œ∑ ‚Üí
             eval-ExFormula œï Œ∑ ‚áî eval-PrenexFormula (toPrenexForm œï) Œ∑
toPrenexForm-ok (constraint x) Œ∑ = ‚áî-refl
toPrenexForm-ok (ex œï) Œ∑ = cong-‚àÉ Œª q ‚Üí toPrenexForm-ok œï (extend-env Œ∑ q)
toPrenexForm-ok (œï and œà) Œ∑ =
  ‚áî-trans (√ó-cong (toPrenexForm-ok œï Œ∑) (toPrenexForm-ok œà Œ∑))
            (equi-conj (toPrenexForm œï) (toPrenexForm œà) Œ∑)
toPrenexForm-ok (œï or œà) Œ∑ =
  ‚áî-trans (‚äé-cong (toPrenexForm-ok œï Œ∑) (toPrenexForm-ok œà Œ∑))
            (equi-disj (toPrenexForm œï) (toPrenexForm œà) Œ∑)
