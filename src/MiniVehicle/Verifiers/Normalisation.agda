
module MiniVehicle.Verifiers.Normalisation where

open import Level using (Lift; lift; lower; suc; 0‚Ñì)
open import Data.Fin using (Fin)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Rational using (‚Ñö; 1‚Ñö; _+_; _*_)
open import Data.Unit using (‚ä§; tt)

open import MiniVehicle.Language.Syntax.Restriction
open import MiniVehicle.Language.Model
open import MiniVehicle.Verifiers.NormalisedExpr
open import MiniVehicle.Verifiers.Syntax.Restriction

record Syn : Set‚ÇÅ where
  field
    Carrier : LinVarCtxt ‚Üí Set
    rename  : Renameable Carrier
open Syn public

K : Set ‚Üí Syn
K A .Carrier Œî = A
K A .rename œÅ a = a

record _==>_ (X Y : Syn) : Set where
  field
    mor : ‚àÄ {Œî} ‚Üí X .Carrier Œî ‚Üí Y .Carrier Œî
open _==>_ public

Flat : Set ‚Üí Syn
Flat = K

‚ü¶Bool‚üß : LinearityVal √ó PolarityVal ‚Üí Syn
‚ü¶Bool‚üß (_ , Ex) .Carrier = ExFormula
‚ü¶Bool‚üß (_ , Ex) .rename = rename-ExFormula
‚ü¶Bool‚üß (_ , U) .Carrier = Constraint
‚ü¶Bool‚üß (_ , U) .rename = rename-Constraint

‚ü¶Num‚üß : LinearityVal ‚Üí Syn
‚ü¶Num‚üß const = K ‚Ñö
‚ü¶Num‚üß linear .Carrier = LinExp
‚ü¶Num‚üß linear .rename = rename-LinExp
‚ü¶Num‚üß nonlinear = K ‚ä§

data LetLift (A : LinVarCtxt ‚Üí Set) : LinVarCtxt ‚Üí Set where
  return     : ‚àÄ {Œî} ‚Üí A Œî ‚Üí LetLift A Œî
  if         : ‚àÄ {Œî} ‚Üí Constraint Œî ‚Üí LetLift A Œî ‚Üí LetLift A Œî ‚Üí LetLift A Œî
  let-linexp : ‚àÄ {Œî} ‚Üí LinExp Œî ‚Üí LetLift A (Œî ,‚àô) ‚Üí LetLift A Œî
  let-funexp : ‚àÄ {Œî} ‚Üí {- fsymb ‚Üí -} Var Œî ‚Üí LetLift A (Œî ,‚àô) ‚Üí LetLift A Œî

-- expand a ExFormula within lets and ifs into a ExFormula
compile : ‚àÄ {Œî} ‚Üí LetLift ExFormula Œî ‚Üí ExFormula Œî
compile (return x)       = x
compile (if œï tr fa)     = ((constraint œï) and (compile tr)) or (constraint (negate œï) and (compile fa))
compile (let-linexp e k) = ex ((constraint ((var 1‚Ñö zero) `=` rename-LinExp succ e)) and compile k)
compile (let-funexp x k) = ex ((constraint (zero `=`f (succ x))) and (compile k))

rename-lift : ‚àÄ {A} ‚Üí Renameable A ‚Üí Renameable (LetLift A)
rename-lift rA œÅ (return x) =
  return (rA œÅ x)
rename-lift rA œÅ (if p k‚ÇÅ k‚ÇÇ) =
  if (rename-Constraint œÅ p) (rename-lift rA œÅ k‚ÇÅ) (rename-lift rA œÅ k‚ÇÇ)
rename-lift rA œÅ (let-linexp e k) =
  let-linexp (rename-LinExp œÅ e) (rename-lift rA (under œÅ) k)
rename-lift rA œÅ (let-funexp v k) =
  let-funexp (œÅ v) (rename-lift rA (under œÅ) k)

bind-let : ‚àÄ {Œî A B} ‚Üí LetLift A Œî ‚Üí (A ‚áí‚Çñ LetLift B) Œî ‚Üí LetLift B Œî
bind-let (return x)       f = f _ (Œª x ‚Üí x) x
bind-let (if e kt kf)     f = if e (bind-let kt f) (bind-let kf f)
bind-let (let-linexp e k) f = let-linexp e (bind-let k (rename-‚áí‚Çñ succ f))
bind-let (let-funexp x k) f = let-funexp x (bind-let k (rename-‚áí‚Çñ succ f))

LiftM : Syn ‚Üí Syn
LiftM A .Carrier = LetLift (A .Carrier)
LiftM A .rename = rename-lift (A .rename)

_‚ü¶‚áí‚üß_ : Syn ‚Üí Syn ‚Üí Syn
(X ‚ü¶‚áí‚üß Y) .Carrier = X .Carrier ‚áí‚Çñ Y .Carrier
(X ‚ü¶‚áí‚üß Y) .rename = rename-‚áí‚Çñ

_‚ü¶√ó‚üß_ : Syn ‚Üí Syn ‚Üí Syn
(A ‚ü¶√ó‚üß B) .Carrier Œî = A .Carrier Œî √ó B .Carrier Œî
(A ‚ü¶√ó‚üß B) .rename œÅ (a , b) = A .rename œÅ a , B .rename œÅ b

‚ü¶‚ä§‚üß : Syn
‚ü¶‚ä§‚üß = K ‚ä§

------------------------------------------------------------------------------
‚ü®_,_‚ü© : ‚àÄ {X Y Z} ‚Üí (X ==> Y) ‚Üí (X ==> Z) ‚Üí (X ==> (Y ‚ü¶√ó‚üß Z))
‚ü® f , g ‚ü© .mor x = f .mor x , g .mor x

‚ü¶proj‚ÇÅ‚üß : ‚àÄ {X Y} ‚Üí (X ‚ü¶√ó‚üß Y) ==> X
‚ü¶proj‚ÇÅ‚üß .mor (x , y) = x

‚ü¶proj‚ÇÇ‚üß : ‚àÄ {X Y} ‚Üí (X ‚ü¶√ó‚üß Y) ==> Y
‚ü¶proj‚ÇÇ‚üß .mor (x , y) = y

‚ü¶terminal‚üß : ‚àÄ {X} ‚Üí X ==> ‚ü¶‚ä§‚üß
‚ü¶terminal‚üß .mor x = tt

‚ü¶id‚üß : ‚àÄ {X} ‚Üí X ==> X
‚ü¶id‚üß .mor x = x
_‚àòS_ : ‚àÄ {X Y Z} ‚Üí (Y ==> Z) ‚Üí (X ==> Y) ‚Üí (X ==> Z)
(f ‚àòS g) .mor x = f .mor (g .mor x)

‚ü¶eval‚üß : ‚àÄ {X Y} ‚Üí ((X ‚ü¶‚áí‚üß Y) ‚ü¶√ó‚üß X) ==> Y
‚ü¶eval‚üß .mor {Œî} (f , x) = f Œî (Œª v ‚Üí v) x

‚ü¶Œõ‚üß : ‚àÄ {X Y Z} ‚Üí ((X ‚ü¶√ó‚üß Y) ==> Z) ‚Üí (X ==> (Y ‚ü¶‚áí‚üß Z))
‚ü¶Œõ‚üß {X} f .mor x = Œª Œî' œÅ y ‚Üí f .mor (X .rename œÅ x , y)

------------------------------------------------------------------------------
‚ü¶‚àÄ‚üß : ‚àÄ {I : Set} ‚Üí (I ‚Üí Syn) ‚Üí Syn
‚ü¶‚àÄ‚üß A .Carrier Œî = ‚àÄ n ‚Üí A n .Carrier Œî
‚ü¶‚àÄ‚üß A .rename œÅ f n = A n .rename œÅ (f n)

‚ü¶‚àÄ-intro‚üß : ‚àÄ {I X A} ‚Üí (‚àÄ (n : I) ‚Üí X ==> A n) ‚Üí X ==> ‚ü¶‚àÄ‚üß A
‚ü¶‚àÄ-intro‚üß f .mor x n = f n .mor x

‚ü¶‚àÄ-elim‚üß : ‚àÄ {I A} (n : I) ‚Üí ‚ü¶‚àÄ‚üß A ==> A n
‚ü¶‚àÄ-elim‚üß n .mor f = f n

------------------------------------------------------------------------------
‚ü¶return‚üß : ‚àÄ {X} ‚Üí X ==> LiftM X
‚ü¶return‚üß .mor = return

‚ü¶extend‚üß : ‚àÄ {X Y Z} ‚Üí ((X ‚ü¶√ó‚üß Y) ==> LiftM Z) ‚Üí (X ‚ü¶√ó‚üß LiftM Y) ==> LiftM Z
‚ü¶extend‚üß {X} f .mor (x , ly) =
  bind-let ly (Œª Œî' œÅ y ‚Üí f .mor (X .rename œÅ x , y))

------------------------------------------------------------------------------
‚ü¶add‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí (Flat (MaxLinRel l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Num‚üß l‚ÇÇ)) ==> ‚ü¶Num‚üß l‚ÇÉ
‚ü¶add‚üß .mor (const-const , x , y) = x + y
‚ü¶add‚üß .mor (const-linear , x , y) = const x `+` y
‚ü¶add‚üß .mor (linear-const , x , y) = x `+` const y
‚ü¶add‚üß .mor (linear-linear , x , y) = x `+` y

‚ü¶mul‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí (Flat (MulLinRel l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Num‚üß l‚ÇÇ)) ==> ‚ü¶Num‚üß l‚ÇÉ
‚ü¶mul‚üß .mor (const-const , x , y) = x * y
‚ü¶mul‚üß .mor (const-linear , x , y) = x ‚äõ y
‚ü¶mul‚üß .mor (linear-const , x , y) = y ‚äõ x

‚ü¶‚â§‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí (Flat (CompRes l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Num‚üß l‚ÇÇ)) ==> ‚ü¶Bool‚üß l‚ÇÉ
‚ü¶‚â§‚üß .mor (compRes const-const ,   x , y) = const x `‚â§` const y
‚ü¶‚â§‚üß .mor (compRes const-linear ,  x , y) = const x `‚â§` y
‚ü¶‚â§‚üß .mor (compRes linear-const ,  x , y) = x `‚â§` const y
‚ü¶‚â§‚üß .mor (compRes linear-linear , x , y) = x `‚â§` y

‚ü¶<‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí (Flat (CompRes l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Num‚üß l‚ÇÇ)) ==> ‚ü¶Bool‚üß l‚ÇÉ
‚ü¶<‚üß .mor (compRes const-const ,   x , y) = const x `<` const y
‚ü¶<‚üß .mor (compRes const-linear ,  x , y) = const x `<` y
‚ü¶<‚üß .mor (compRes linear-const ,  x , y) = x `<` const y
‚ü¶<‚üß .mor (compRes linear-linear , x , y) = x `<` y

‚ü¶not‚üß : ‚àÄ {p‚ÇÅ p‚ÇÇ} ‚Üí (Flat (NotRes p‚ÇÅ p‚ÇÇ) ‚ü¶√ó‚üß ‚ü¶Bool‚üß p‚ÇÅ) ==> ‚ü¶Bool‚üß p‚ÇÇ
‚ü¶not‚üß .mor (notRes U , x) = negate x

‚ü¶and‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí
         (Flat (MaxBoolRes l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß
           (‚ü¶Bool‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Bool‚üß l‚ÇÇ)) ==> ‚ü¶Bool‚üß l‚ÇÉ
‚ü¶and‚üß .mor (maxBoolRes _ U-U ,   x , y) = x and y
‚ü¶and‚üß .mor (maxBoolRes _ U-Ex ,  x , y) = constraint x and y
‚ü¶and‚üß .mor (maxBoolRes _ Ex-U ,  x , y) = x and constraint y
‚ü¶and‚üß .mor (maxBoolRes _ Ex-Ex , x , y) = x and y

‚ü¶or‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí
         (Flat (MaxBoolRes l‚ÇÅ l‚ÇÇ l‚ÇÉ) ‚ü¶√ó‚üß
           (‚ü¶Bool‚üß l‚ÇÅ ‚ü¶√ó‚üß ‚ü¶Bool‚üß l‚ÇÇ)) ==> ‚ü¶Bool‚üß l‚ÇÉ
‚ü¶or‚üß .mor (maxBoolRes _ U-U ,   x , y) = x or y
‚ü¶or‚üß .mor (maxBoolRes _ U-Ex ,  x , y) = constraint x or y
‚ü¶or‚üß .mor (maxBoolRes _ Ex-U ,  x , y) = x or constraint y
‚ü¶or‚üß .mor (maxBoolRes _ Ex-Ex , x , y) = x or y

‚ü¶const‚üß : ‚àÄ {l} ‚Üí ‚Ñö ‚Üí Flat (NumConstRel l) ==> ‚ü¶Num‚üß l
‚ü¶const‚üß q .mor const = q

‚ü¶extFunc‚üß : ‚àÄ {l‚ÇÅ l‚ÇÇ} ‚Üí (Flat (FuncRel l‚ÇÅ l‚ÇÇ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l‚ÇÅ)) ==> LiftM (‚ü¶Num‚üß l‚ÇÇ)
‚ü¶extFunc‚üß .mor (linear-linear , exp) =
  let-linexp exp (let-funexp {- f -} zero (return (var 1‚Ñö zero)))

‚ü¶if‚üß : ‚àÄ {X b} ‚Üí ((LiftM X ‚ü¶√ó‚üß LiftM X) ‚ü¶√ó‚üß (Flat (IfRes b) ‚ü¶√ó‚üß (‚ü¶Bool‚üß b))) ==> LiftM X
‚ü¶if‚üß .mor ((tr , fa) , (ifRes _ , œï)) = if œï tr fa

‚ü¶Index‚üß : ‚Ñï ‚Üí Syn
‚ü¶Index‚üß n = K (Fin n)

‚ü¶‚àÉ‚üß : ‚àÄ {l p‚ÇÅ p‚ÇÇ} ‚Üí
     (Flat (QuantRes l p‚ÇÅ p‚ÇÇ) ‚ü¶√ó‚üß (‚ü¶Num‚üß l ‚ü¶‚áí‚üß LiftM (‚ü¶Bool‚üß p‚ÇÅ))) ==> ‚ü¶Bool‚üß p‚ÇÇ
‚ü¶‚àÉ‚üß .mor {Œî} (quantRes U , f) =
  ex (compile (bind-let (f (Œî ,‚àô) succ (var 1‚Ñö zero))
                                     Œª Œî' œÅ œï ‚Üí return (constraint œï)))
‚ü¶‚àÉ‚üß .mor {Œî} (quantRes Ex , f) =
  ex (compile (f (Œî ,‚àô) succ (var 1‚Ñö zero)))

‚Ñ≥ : Model verifierRestriction (suc 0‚Ñì) 0‚Ñì
‚Ñ≥ .Model.‚ü¶Type‚üß = Syn
‚Ñ≥ .Model._==>_ = _==>_
‚Ñ≥ .Model.Flat = Flat
‚Ñ≥ .Model.elem a .mor _ = a
‚Ñ≥ .Model.‚ü¶id‚üß = ‚ü¶id‚üß
‚Ñ≥ .Model._‚àò_ = _‚àòS_
‚Ñ≥ .Model._‚ü¶√ó‚üß_ = _‚ü¶√ó‚üß_
‚Ñ≥ .Model.‚ü¶‚ä§‚üß = ‚ü¶‚ä§‚üß
‚Ñ≥ .Model.‚ü¶terminal‚üß = ‚ü¶terminal‚üß
‚Ñ≥ .Model.‚ü¶proj‚ÇÅ‚üß = ‚ü¶proj‚ÇÅ‚üß
‚Ñ≥ .Model.‚ü¶proj‚ÇÇ‚üß = ‚ü¶proj‚ÇÇ‚üß
‚Ñ≥ .Model.‚ü®_,_‚ü© = ‚ü®_,_‚ü©
‚Ñ≥ .Model._‚ü¶‚áí‚üß_ = _‚ü¶‚áí‚üß_
‚Ñ≥ .Model.‚ü¶Œõ‚üß = ‚ü¶Œõ‚üß
‚Ñ≥ .Model.‚ü¶eval‚üß = ‚ü¶eval‚üß
‚Ñ≥ .Model.‚ü¶‚àÄ‚üß = ‚ü¶‚àÄ‚üß
‚Ñ≥ .Model.‚ü¶‚àÄ-intro‚üß = ‚ü¶‚àÄ-intro‚üß
‚Ñ≥ .Model.‚ü¶‚àÄ-elim‚üß = ‚ü¶‚àÄ-elim‚üß
‚Ñ≥ .Model.Mon = LiftM
‚Ñ≥ .Model.‚ü¶return‚üß = ‚ü¶return‚üß
‚Ñ≥ .Model.‚ü¶extend‚üß = ‚ü¶extend‚üß
‚Ñ≥ .Model.‚ü¶Num‚üß = ‚ü¶Num‚üß
‚Ñ≥ .Model.‚ü¶add‚üß = ‚ü¶add‚üß
‚Ñ≥ .Model.‚ü¶mul‚üß = ‚ü¶mul‚üß
‚Ñ≥ .Model.‚ü¶const‚üß = ‚ü¶const‚üß
‚Ñ≥ .Model.‚ü¶extFunc‚üß = ‚ü¶extFunc‚üß
‚Ñ≥ .Model.‚ü¶Bool‚üß = ‚ü¶Bool‚üß
‚Ñ≥ .Model.‚ü¶not‚üß = ‚ü¶not‚üß
‚Ñ≥ .Model.‚ü¶and‚üß = ‚ü¶and‚üß
‚Ñ≥ .Model.‚ü¶or‚üß = ‚ü¶or‚üß
‚Ñ≥ .Model.‚ü¶‚â§‚üß = ‚ü¶‚â§‚üß
‚Ñ≥ .Model.‚ü¶<‚üß = ‚ü¶<‚üß
‚Ñ≥ .Model.‚ü¶if‚üß = ‚ü¶if‚üß
‚Ñ≥ .Model.‚ü¶Index‚üß = ‚ü¶Index‚üß
‚Ñ≥ .Model.‚ü¶idx‚üß n i .mor _ = i
‚Ñ≥ .Model.‚ü¶‚àÉ‚üß = ‚ü¶‚àÉ‚üß

{-
module ùí© = Interpret ? ‚Ñ≥

open import MiniVehicle

normalise : Œµ / Œµ ‚ä¢ Bool (BoolRes (linear , Ex)) ‚Üí PrenexFormula Œµ
normalise t = toPrenexForm (compile (ùí©.‚ü¶ t ‚üßtm (lift tt) .mor tt))
-}
