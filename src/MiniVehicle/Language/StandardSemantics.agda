
module MiniVehicle.Language.StandardSemantics where

open import Level using (0‚Ñì; suc)
open import Data.Bool using (true; false; _‚àß_; _‚à®_; not) renaming (Bool to ùîπ; T to True)
open import Data.Fin using (Fin)
open import Data.Nat using (‚Ñï)
open import Data.Product as Prod using (Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax)
open import Data.Rational using (‚Ñö; _‚â§·µá_) renaming (_+_ to _+‚Ñö_; _*_ to _*‚Ñö_)
open import Data.Sum as Sum using (_‚äé_)
open import Data.Unit using (‚ä§; tt)
open import Function using (_‚áî_)
open import Relation.Binary using (REL)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; trans; cong; sym; cong‚ÇÇ)

open import MiniVehicle.Language.Syntax.Restriction
open import MiniVehicle.Language.Interpretation
open import Util


------------------------------------------------------------------------------
-- Quantifiers

data Quant (A : Set) : Set where
  return : A ‚Üí Quant A
  _and_  : Quant A ‚Üí Quant A ‚Üí Quant A
  _or_   : Quant A ‚Üí Quant A ‚Üí Quant A
  ex     : (‚Ñö ‚Üí Quant A) ‚Üí Quant A

eval-Quant : ‚àÄ {A} ‚Üí Quant A ‚Üí (A ‚Üí Set) ‚Üí Set
eval-Quant (return x) k = k x
eval-Quant (ex x)     k = Œ£[ q ‚àà ‚Ñö ] eval-Quant (x q) k
eval-Quant (x and y) k = (eval-Quant x k) √ó (eval-Quant y k)
eval-Quant (x or y) k = (eval-Quant x k) ‚äé (eval-Quant y k)

data QuantRel {A B : Set} (R : REL A B 0‚Ñì) : REL (Quant A) (Quant B) 0‚Ñì where
  return : ‚àÄ {a b} ‚Üí R a b ‚Üí QuantRel R (return a) (return b)
  _and_ : ‚àÄ {a b c d} ‚Üí QuantRel R a b ‚Üí QuantRel R c d ‚Üí QuantRel R (a and c) (b and d)
  _or_ : ‚àÄ {a b c d} ‚Üí QuantRel R a b ‚Üí QuantRel R c d ‚Üí QuantRel R (a or c) (b or d)
  ex : ‚àÄ {f g} ‚Üí (‚àÄ q ‚Üí QuantRel R (f q) (g q)) ‚Üí QuantRel R (ex f) (ex g)

eval-QuantRel : ‚àÄ {A B} {x : Quant A} {y : Quant B} {f : A ‚Üí Set} {g : B ‚Üí Set} ‚Üí
               QuantRel (Œª a b ‚Üí (f a) ‚áî (g b)) x y ‚Üí
               (eval-Quant x f) ‚áî (eval-Quant y g)
eval-QuantRel {x = return _} {return _} (return Rxy) = Rxy
eval-QuantRel {x = _ and _} {_ and _} (Rxy‚ÇÅ and Rxy‚ÇÇ) = eval-QuantRel Rxy‚ÇÅ √ó-‚áî eval-QuantRel Rxy‚ÇÇ
eval-QuantRel {x = _ or _} {_ or _} (Rxy‚ÇÅ or Rxy‚ÇÇ) = eval-QuantRel Rxy‚ÇÅ ‚äé-‚áî eval-QuantRel Rxy‚ÇÇ
eval-QuantRel {x = ex _} {ex _} (ex Rxy) = Œ£-‚áî (Œª {x} ‚Üí eval-QuantRel (Rxy x))

------------------------------------------------------------------------------
-- Standard model

module _ (extFunc : ‚Ñö ‚Üí ‚Ñö) where
  open Model

  ‚Ñ≥ : Model defaultRestriction (suc 0‚Ñì) 0‚Ñì
  ‚Ñ≥ .‚ü¶Type‚üß = Set
  ‚Ñ≥ ._==>_ X Y = X ‚Üí Y
  ‚Ñ≥ .Flat X = X
  ‚Ñ≥ .elem a x = a
  ‚Ñ≥ .‚ü¶id‚üß = Œª x ‚Üí x
  ‚Ñ≥ ._‚àò_ f g x = f (g x)
  ‚Ñ≥ ._‚ü¶√ó‚üß_ = _√ó_
  ‚Ñ≥ .‚ü¶‚ä§‚üß = ‚ä§
  ‚Ñ≥ .‚ü¶terminal‚üß x = tt
  ‚Ñ≥ .‚ü¶proj‚ÇÅ‚üß = proj‚ÇÅ
  ‚Ñ≥ .‚ü¶proj‚ÇÇ‚üß = proj‚ÇÇ
  ‚Ñ≥ .‚ü®_,_‚ü© f g x = f x , g x
  ‚Ñ≥ ._‚ü¶‚áí‚üß_ X Y = X ‚Üí Y
  ‚Ñ≥ .‚ü¶Œõ‚üß f x y = f (x , y)
  ‚Ñ≥ .‚ü¶eval‚üß (f , x) = f x
  ‚Ñ≥ .‚ü¶‚àÄ‚üß A = ‚àÄ n ‚Üí A n
  ‚Ñ≥ .‚ü¶‚àÄ-intro‚üß f x n = f n x
  ‚Ñ≥ .‚ü¶‚àÄ-elim‚üß n f = f n
  ‚Ñ≥ .Mon X = X
  ‚Ñ≥ .‚ü¶return‚üß x = x
  ‚Ñ≥ .‚ü¶extend‚üß f = f
  ‚Ñ≥ .‚ü¶Num‚üß _ = ‚Ñö
  ‚Ñ≥ .‚ü¶add‚üß (_ , x , y)  = x +‚Ñö y
  ‚Ñ≥ .‚ü¶mul‚üß (_ , x , y)  = x *‚Ñö y
  ‚Ñ≥ .‚ü¶const‚üß q _ = q
  ‚Ñ≥ .‚ü¶extFunc‚üß (_ , v)  = extFunc v
  ‚Ñ≥ .‚ü¶Bool‚üß U = ùîπ
  ‚Ñ≥ .‚ü¶Bool‚üß Ex = Quant ùîπ
  ‚Ñ≥ .‚ü¶not‚üß (U , x) = not x
  ‚Ñ≥ .‚ü¶and‚üß (U-U , x , y) = x ‚àß y
  ‚Ñ≥ .‚ü¶and‚üß (U-Ex , x , y) = (return x) and y
  ‚Ñ≥ .‚ü¶and‚üß (Ex-U , x , y) = x and (return y)
  ‚Ñ≥ .‚ü¶and‚üß (Ex-Ex , x , y) = x and y
  ‚Ñ≥ .‚ü¶or‚üß (U-U , x , y) = x ‚à® y
  ‚Ñ≥ .‚ü¶or‚üß (U-Ex , x , y) = (return x) or y
  ‚Ñ≥ .‚ü¶or‚üß (Ex-U , x , y) = x or (return y)
  ‚Ñ≥ .‚ü¶or‚üß (Ex-Ex , x , y) = x or y
  ‚Ñ≥ .‚ü¶‚â§‚üß (U , q‚ÇÅ , q‚ÇÇ) = q‚ÇÅ ‚â§·µá q‚ÇÇ
  ‚Ñ≥ .‚ü¶<‚üß (U , q‚ÇÅ , q‚ÇÇ) = q‚ÇÅ <·µá q‚ÇÇ
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , (U , true)) = tr
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , (U , false)) = fa
  ‚Ñ≥ .‚ü¶Index‚üß i = Fin i
  ‚Ñ≥ .‚ü¶idx‚üß _ i _  = i
  ‚Ñ≥ .‚ü¶‚àÉ‚üß (U , f) = ex (Œª q ‚Üí return (f q))
  ‚Ñ≥ .‚ü¶‚àÉ‚üß (Ex , f) = ex f
