
open import Data.Rational using (โ; _+_; _*_; _โคแต_; _โ_; 1โ)
open import MiniVehicle.LossFunctions.GenericDifferentiableLogic

module MiniVehicle.LossFunctions.GenericCorrectness
  (extFunc : โ โ โ) (dl : DifferentiableLogic) (dl-relation : DifferentiableLogicRelation dl) where

open import Level using (0โ; suc; lift)

open import Data.Bool using (not; _โง_; _โจ_; true; false)
                   renaming (Bool to ๐น; T to True; if_then_else_ to ifแต_then_else_)
open import Data.Bool.Properties using (not-involutive) renaming (T? to True?)
open import Data.Empty using (โฅ)
open import Data.Fin using (Fin)
open import Data.Nat using (โ)
open import Data.Product using (_ร_; _,_; projโ; projโ; ฮฃ-syntax)
open import Data.Rational as โ
open import Function using (_$_)
open import Relation.Nullary.Decidable using (โ_โ)
open import Data.Rational.Properties using (*-identityหก; *-comm; โคแตโโค; โคโโคแต; module โค-Reasoning)
open import Data.Sum using (_โ_; injโ; injโ)
open import Data.Unit using (โค; tt)
open import Function using (_โ_; mkโ; id)
open import Relation.Binary.PropositionalEquality
  using (_โก_; refl; trans; cong; sym; congโ; subst; module โก-Reasoning)
open import Relation.Nullary using (ยฌ_)

open import Util
open import MiniVehicle.Language.Syntax.Restriction
open import MiniVehicle.Language.Model
open import EquiInhabited

import MiniVehicle.LossFunctions.GenericCompilation as N
import MiniVehicle.Language.Syntax N.lossRestriction as MiniVehicle
import MiniVehicle.Language.StandardSemantics as S

open DifferentiableLogic dl
open DifferentiableLogicRelation dl-relation

------------------------------------------------------------------------------
-- Our category of related interpretations

module ๐ฉ = Model (N.โณ dl)
module ๐ฎ = Model S.โณ

record โฆTypeโง : Set (suc 0โ) where
  field
    Left  : ๐ฎ.โฆTypeโง
    Right : ๐ฉ.โฆTypeโง
    rel   : Left โ Right โ Set
open โฆTypeโง

infixr 20 _==>_
record _==>_ (X Y : โฆTypeโง) : Set where
  field
    left    : X .Left ๐ฎ.==> Y .Left
    right   : X .Right ๐ฉ.==> Y .Right
    rel-mor : โ lx rx โ X .rel lx rx โ Y .rel (left lx) (right rx)
open _==>_

------------------------------------------------------------------------------
-- Composition

_โ_ : โ {X Y Z} โ (Y ==> Z) โ (X ==> Y) โ (X ==> Z)
(f โ g) .left  = f .left  ๐ฎ.โ g .left
(f โ g) .right = f .right ๐ฉ.โ g .right
(f โ g) .rel-mor xโ xโ r-xโxโ = f .rel-mor _ _ (g .rel-mor _ _ r-xโxโ)

โฆidโง : โ {X} โ X ==> X
โฆidโง .left x = x
โฆidโง .right = ๐ฉ.โฆidโง
โฆidโง .rel-mor xโ xโ r = r

------------------------------------------------------------------------------
-- Sets

Flat : Set โ โฆTypeโง
Flat X .Left = X
Flat X .Right = X
Flat X .rel = _โก_

elem : โ {A X} โ A โ X ==> Flat A
elem a .left = ๐ฎ.elem a
elem a .right = ๐ฉ.elem a
elem a .rel-mor _ _ _ = refl

Flat-map : โ {A B} โ (A โ B) โ Flat A ==> Flat B
Flat-map f .left = f
Flat-map f .right = f
Flat-map f .rel-mor _ _ = cong f

------------------------------------------------------------------------------
-- Products

infixr 2 _โฆรโง_

_โฆรโง_ : โฆTypeโง โ โฆTypeโง โ โฆTypeโง
(X โฆรโง Y) .Left = X .Left ๐ฎ.โฆรโง Y .Left
(X โฆรโง Y) .Right = X .Right ๐ฉ.โฆรโง Y .Right
(X โฆรโง Y) .rel (x , y) (x' , y') = X .rel x x' ร Y .rel y y'

โจ_,_โฉR : โ {X Y Z} โ (X ==> Y) โ (X ==> Z) โ (X ==> (Y โฆรโง Z))
โจ f , g โฉR .left = ๐ฎ.โจ f .left , g .left โฉ
โจ f , g โฉR .right = ๐ฉ.โจ f .right , g .right โฉ
โจ f , g โฉR .rel-mor xโ xโ r-xโxโ =
  f .rel-mor xโ xโ r-xโxโ ,
  g .rel-mor xโ xโ r-xโxโ

โฆprojโโง : โ {X Y} โ (X โฆรโง Y) ==> X
โฆprojโโง .left = projโ
โฆprojโโง .right = ๐ฉ.โฆprojโโง
โฆprojโโง .rel-mor _ _ r = r .projโ

โฆprojโโง : โ {X Y} โ (X โฆรโง Y) ==> Y
โฆprojโโง .left = projโ
โฆprojโโง .right = ๐ฉ.โฆprojโโง
โฆprojโโง .rel-mor _ _ r = r .projโ

------------------------------------------------------------------------------
-- Functions and Universal Quantification

_โฆโโง_ : โฆTypeโง โ โฆTypeโง โ โฆTypeโง
(X โฆโโง Y) .Left = X .Left ๐ฎ.โฆโโง Y .Left
(X โฆโโง Y) .Right = X .Right ๐ฉ.โฆโโง Y .Right
(X โฆโโง Y) .rel f g = โ x y โ  X .rel x y โ Y .rel (f x) (g y)

โฆฮโง : โ {X Y Z} โ ((X โฆรโง Y) ==> Z) โ (X ==> (Y โฆโโง Z))
โฆฮโง {X} f .left = ๐ฎ.โฆฮโง (f .left)
โฆฮโง {X} f .right = ๐ฉ.โฆฮโง (f .right)
โฆฮโง {X} f .rel-mor xโ xโ ฯ yโ yโ q = f .rel-mor (xโ , yโ) (xโ , yโ) (ฯ , q)

โฆevalโง : โ {X Y} โ ((X โฆโโง Y) โฆรโง X) ==> Y
โฆevalโง .left = ๐ฎ.โฆevalโง
โฆevalโง .right = ๐ฉ.โฆevalโง
โฆevalโง .rel-mor (fโ , xโ) (fโ , xโ) (r-fโfโ , r-xโxโ) = r-fโfโ xโ xโ r-xโxโ

โฆโโง : โ {I : Set} โ (I โ โฆTypeโง) โ โฆTypeโง
โฆโโง A .Left = ๐ฎ.โฆโโง (ฮป n โ A n .Left)
โฆโโง A .Right = ๐ฉ.โฆโโง (ฮป n โ A n .Right)
โฆโโง A .rel x y = โ n โ A n .rel (x n) (y n)

โฆโ-introโง : โ {I X A} โ (โ (n : I) โ X ==> A n) โ X ==> โฆโโง A
โฆโ-introโง f .left = ๐ฎ.โฆโ-introโง (ฮป n โ f n .left)
โฆโ-introโง f .right = ๐ฉ.โฆโ-introโง (ฮป n โ f n .right)
โฆโ-introโง f .rel-mor xโ xโ r n = f n .rel-mor xโ xโ r

โฆโ-elimโง : โ {I A} (n : I) โ โฆโโง A ==> A n
โฆโ-elimโง n .left = ๐ฎ.โฆโ-elimโง n
โฆโ-elimโง n .right = ๐ฉ.โฆโ-elimโง n
โฆโ-elimโง n .rel-mor fโ fโ r = r n

------------------------------------------------------------------------------
-- Numbers, and linear expressions

โฆNumโง : โค โ โฆTypeโง
โฆNumโง p .Left = ๐ฎ.โฆNumโง p
โฆNumโง p .Right = ๐ฉ.โฆNumโง p
โฆNumโง p .rel = _โก_

โฆconstโง : โ {l} โ โ โ Flat โค ==> โฆNumโง l
โฆconstโง q .left _ = q
โฆconstโง q .right = ๐ฉ.โฆconstโง q
โฆconstโง q .rel-mor const const _ = refl

โฆaddโง : โ {lโ lโ lโ} โ
         (Flat โค โฆรโง (โฆNumโง lโ โฆรโง โฆNumโง lโ)) ==> โฆNumโง lโ
โฆaddโง .left = ๐ฎ.โฆaddโง
โฆaddโง .right = ๐ฉ.โฆaddโง
โฆaddโง .rel-mor _ _ (refl , xโโ , yโโ) = congโ _+_ xโโ yโโ

โฆmulโง : โ {lโ lโ lโ} โ (Flat โค โฆรโง (โฆNumโง lโ โฆรโง โฆNumโง lโ)) ==> โฆNumโง lโ
โฆmulโง .left = ๐ฎ.โฆmulโง
โฆmulโง .right = ๐ฉ.โฆmulโง
โฆmulโง .rel-mor _ _ (refl , xโโ , yโโ) = congโ _*_ xโโ yโโ

------------------------------------------------------------------------------
-- Booleans and constraints

โฆBoolโง : PolarityVal โ โฆTypeโง
โฆBoolโง p .Left = ๐ฎ.โฆBoolโง p
โฆBoolโง p .Right = ๐ฉ.โฆBoolโง p
โฆBoolโง U .rel = R
โฆBoolโง Ex .rel = S.QuantRel R

โฆโคโง : โ {lโ lโ lโ} โ (Flat (ConstPolRel lโ) โฆรโง (โฆNumโง lโ โฆรโง โฆNumโง lโ)) ==> โฆBoolโง lโ
โฆโคโง .left = ๐ฎ.โฆโคโง
โฆโคโง .right = ๐ฉ.โฆโคโง
โฆโคโง .rel-mor (U , x , y) (_ , p , q) (refl , refl , refl) = Rโชโคโซ

โฆ<โง : โ {lโ lโ lโ} โ (Flat (ConstPolRel lโ) โฆรโง (โฆNumโง lโ โฆรโง โฆNumโง lโ)) ==> โฆBoolโง lโ
โฆ<โง .left = ๐ฎ.โฆ<โง
โฆ<โง .right = ๐ฉ.โฆ<โง
โฆ<โง .rel-mor (U , x , y) (_ , p , q) (refl , refl , refl) = Rโช<โซ

โฆandโง : โ {lโ lโ lโ} โ (Flat (MaxPolRel lโ lโ lโ) โฆรโง (โฆBoolโง lโ โฆรโง โฆBoolโง lโ)) ==> โฆBoolโง lโ
โฆandโง .left = ๐ฎ.โฆandโง
โฆandโง .right = ๐ฉ.โฆandโง
โฆandโง .rel-mor (U-U , a , b) (U-U , p , q) (_ , aโฟp , bโฟq) = Rโชandโซ aโฟp bโฟq
โฆandโง .rel-mor (U-Ex , _) (U-Ex , _) (_ , xโโ , yโโ) = S.return xโโ S.and yโโ
โฆandโง .rel-mor (Ex-U , _) (Ex-U , _) (_ , xโโ , yโโ) = xโโ S.and S.return yโโ
โฆandโง .rel-mor (Ex-Ex , _) (Ex-Ex , _) (_ ,  xโโ , yโโ) = xโโ S.and yโโ

โฆorโง : โ {lโ lโ lโ} โ
          (Flat (MaxPolRel lโ lโ lโ) โฆรโง
            (โฆBoolโง lโ โฆรโง โฆBoolโง lโ)) ==> โฆBoolโง lโ
โฆorโง .left = ๐ฎ.โฆorโง
โฆorโง .right = ๐ฉ.โฆorโง
โฆorโง .rel-mor (U-U , a , b) (U-U , p , q) (_ , aโฟp , bโฟq) = Rโชorโซ aโฟp bโฟq
โฆorโง .rel-mor (U-Ex , _) (U-Ex , _) (_ , xโโ , yโโ) = S.return xโโ S.or yโโ
โฆorโง .rel-mor (Ex-U , _) (Ex-U , _) (_ , xโโ , yโโ) = xโโ S.or S.return yโโ
โฆorโง .rel-mor (Ex-Ex , _) (Ex-Ex , _) (_ , xโโ , yโโ) = xโโ S.or yโโ

โฆnotโง : โ {pโ pโ} โ (Flat (NegPolRel pโ pโ) โฆรโง โฆBoolโง pโ) ==> โฆBoolโง pโ
โฆnotโง .left = ๐ฎ.โฆnotโง
โฆnotโง .right = ๐ฉ.โฆnotโง
โฆnotโง .rel-mor (U , a) (_ , p) (refl , aโฟp) = Rโชnotโซ aโฟp

------------------------------------------------------------------------------
-- Monad (identity)

Mon : โฆTypeโง โ โฆTypeโง
Mon X .Left = ๐ฎ.Mon (X .Left)
Mon X .Right = ๐ฉ.Mon (X .Right)
Mon X .rel = X .rel

โฆreturnโง : โ {X} โ X ==> Mon X
โฆreturnโง .left = ๐ฎ.โฆreturnโง
โฆreturnโง .right = ๐ฉ.โฆreturnโง
โฆreturnโง .rel-mor xโ xโ r-xโxโ = r-xโxโ

extendR : โ {X Y Z} โ ((X โฆรโง Y) ==> Mon Z) โ (X โฆรโง Mon Y) ==> Mon Z
extendR f .left = ๐ฎ.โฆextendโง (f .left)
extendR f .right = ๐ฉ.โฆextendโง (f .right)
extendR {X} f .rel-mor pโ pโ pโ-pโ = f .rel-mor pโ pโ pโ-pโ

โฆifโง : โ {X b} โ ((Mon X โฆรโง Mon X) โฆรโง (Flat โฅ โฆรโง (โฆBoolโง b))) ==> Mon X
โฆifโง .left ()
โฆifโง .right ()
โฆifโง .rel-mor ()

โฆโโง : โ {pโ pโ l} โ
     (Flat (QuantifyRel pโ pโ) โฆรโง (โฆNumโง l โฆโโง Mon (โฆBoolโง pโ))) ==> โฆBoolโง pโ
โฆโโง .left = ๐ฎ.โฆโโง
โฆโโง {l = l} .right = ๐ฉ.โฆโโง {l = l}
โฆโโง {l = l} .rel-mor (U  , fโ) (U , fโ) (refl , r) = S.ex ฮป q โ S.return (r q q refl)
โฆโโง {l = l} .rel-mor (Ex , fโ) (Ex , fโ) (refl , r) = S.ex ฮป q โ r q q refl

โณ : Model N.lossRestriction (suc 0โ) 0โ
โณ .Model.โฆTypeโง = โฆTypeโง
โณ .Model._==>_ = _==>_
โณ .Model.Flat = Flat
โณ .Model.elem = elem
โณ .Model.Flat-map = Flat-map
โณ .Model.โฆidโง = โฆidโง
โณ .Model._โ_ = _โ_
โณ .Model._โฆรโง_ = _โฆรโง_
โณ .Model.โฆprojโโง = โฆprojโโง
โณ .Model.โฆprojโโง = โฆprojโโง
โณ .Model.โจ_,_โฉ = โจ_,_โฉR
โณ .Model._โฆโโง_ = _โฆโโง_
โณ .Model.โฆฮโง = โฆฮโง
โณ .Model.โฆevalโง = โฆevalโง
โณ .Model.โฆโโง = โฆโโง
โณ .Model.โฆโ-introโง = โฆโ-introโง
โณ .Model.โฆโ-elimโง = โฆโ-elimโง
โณ .Model.Mon = Mon
โณ .Model.โฆreturnโง = โฆreturnโง
โณ .Model.โฆextendโง = extendR
โณ .Model.โฆNumโง = โฆNumโง
โณ .Model.โฆaddโง = โฆaddโง
โณ .Model.โฆmulโง = โฆmulโง
โณ .Model.โฆconstโง = โฆconstโง
โณ .Model.โฆBoolโง = โฆBoolโง
โณ .Model.โฆnotโง = โฆnotโง
โณ .Model.โฆandโง = โฆandโง
โณ .Model.โฆorโง = โฆorโง
โณ .Model.โฆโคโง = โฆโคโง
โณ .Model.โฆ<โง = โฆ<โง
โณ .Model.โฆifโง {X} {b} = โฆifโง {X} {b}
โณ .Model.โฆโโง = โฆโโง

open MiniVehicle hiding (_โแตฃ_; under)

import MiniVehicle.Language.Interpretation N.lossRestriction โณ as โ

------------------------------------------------------------------------------
-- Propositional compilation

standardProp : ฮต / ฮต โข Bool (BoolRes U) โ ๐น
standardProp t = โ.โฆ t โงtm (lift tt) .left tt

lossFunctionProp : ฮต / ฮต โข Bool (BoolRes U) โ โชBoolโซ
lossFunctionProp t = โ.โฆ t โงtm (lift tt) .right tt

prop-correctness : (t : ฮต / ฮต โข Bool (BoolRes U)) โ R (standardProp t) (lossFunctionProp t)
prop-correctness t = โ.โฆ t โงtm (lift tt) .rel-mor tt tt refl

------------------------------------------------------------------------------
-- Quantified compilation

standard : ฮต / ฮต โข Bool (BoolRes Ex) โ Set
standard t = S.eval-Quant (โ.โฆ_โงtm t (lift tt) .left tt) True

lossFunction : ฮต / ฮต โข Bool (BoolRes Ex) โ Set
lossFunction t = S.eval-Quant (โ.โฆ t โงtm (lift tt) .right tt) (R true)
{-
full-correctness : (t : ฮต / ฮต โข Bool (BoolRes Ex)) โ standard t โ lossFunction t
full-correctness t = S.eval-QuantRel (โ.โฆ t โงtm (lift tt) .rel-mor tt tt tt)
-}
