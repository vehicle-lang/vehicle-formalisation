
module MiniVehicle.LossFunctions.Compile where

open import Data.Fin
open import Data.Empty
open import Data.Product
open import Data.Unit
open import Data.Bool renaming (Bool to ùîπ)
open import Level as Level using (0‚Ñì)
open import Function.Base as Function using ()
open import Data.Rational as ‚Ñö

open import MiniVehicle.Language.SyntaxRestriction


lossRestriction : SyntaxRestriction
lossRestriction = record
  { SyntaxRestriction noRestriction
  ; IfRestriction = Œª _ ‚Üí ‚ä•
  }

open import MiniVehicle.Language.Interpretation lossRestriction

module _ (extFunc : ‚Ñö ‚Üí ‚Ñö) (max : (‚Ñö ‚Üí ‚Ñö) ‚Üí ‚Ñö) where

  open Model

  ‚Ñ≥ : Model (Level.suc 0‚Ñì) 0‚Ñì
  ‚Ñ≥ .‚ü¶Type‚üß = Set
  ‚Ñ≥ ._==>_ X Y = X ‚Üí Y
  ‚Ñ≥ .Flat X = X
  ‚Ñ≥ .elem a x = a
  ‚Ñ≥ .‚ü¶id‚üß = Œª x ‚Üí x
  ‚Ñ≥ ._‚àò_ f g x = f (g x)
  ‚Ñ≥ ._‚ü¶√ó‚üß_ = _√ó_
  ‚Ñ≥ .‚ü¶‚ä§‚üß = ‚ä§
  ‚Ñ≥ .‚ü¶terminal‚üß x = tt
  ‚Ñ≥ .‚ü¶proj‚ÇÅ‚üß = proj‚ÇÅ
  ‚Ñ≥ .‚ü¶proj‚ÇÇ‚üß = proj‚ÇÇ
  ‚Ñ≥ .‚ü®_,_‚ü© f g x = f x , g x
  ‚Ñ≥ ._‚ü¶‚áí‚üß_ X Y = X ‚Üí Y
  ‚Ñ≥ .‚ü¶Œõ‚üß f x y = f (x , y)
  ‚Ñ≥ .‚ü¶eval‚üß (f , x) = f x
  ‚Ñ≥ .‚ü¶‚àÄ‚üß A = ‚àÄ n ‚Üí A n
  ‚Ñ≥ .‚ü¶‚àÄ-intro‚üß f x n = f n x
  ‚Ñ≥ .‚ü¶‚àÄ-elim‚üß n f = f n
  ‚Ñ≥ .Mon X = X
  ‚Ñ≥ .‚ü¶return‚üß x = x
  ‚Ñ≥ .‚ü¶extend‚üß f = f
  ‚Ñ≥ .‚ü¶Num‚üß _ = ‚Ñö
  ‚Ñ≥ .‚ü¶add‚üß (_ , x , y)  = x ‚Ñö.+ y
  ‚Ñ≥ .‚ü¶mul‚üß (_ , x , y)  = x ‚Ñö.* y
  ‚Ñ≥ .‚ü¶const‚üß q _ = q
  ‚Ñ≥ .‚ü¶extFunc‚üß (_ , v)  = extFunc v
  ‚Ñ≥ .‚ü¶Bool‚üß _ = ‚Ñö
  ‚Ñ≥ .‚ü¶not‚üß (_ , x) = ‚Ñö.- x
  ‚Ñ≥ .‚ü¶and‚üß (_ , x , y) = x ‚Ñö.‚äì y
  ‚Ñ≥ .‚ü¶or‚üß (_ , x , y) = x ‚Ñö.‚äî y
  ‚Ñ≥ .‚ü¶‚â§‚üß (_ , x , y) = x ‚Ñö.- y
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , (() , _))
  ‚Ñ≥ .‚ü¶Index‚üß i = Fin i
  ‚Ñ≥ .‚ü¶idx‚üß _ i _  = i
  ‚Ñ≥ .‚ü¶‚àÉ‚üß (_ , f) = max f

  module ùí© = Interpret ‚Ñ≥
  open import MiniVehicle.Language lossRestriction

  compile : Œµ / Œµ ‚ä¢ Bool (BoolRes tt) ‚Üí ‚Ñö
  compile t = ùí©.‚ü¶ t ‚üßtm _ tt
