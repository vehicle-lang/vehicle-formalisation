module MiniVehicle.LossFunctions.GenericCompilation where

open import Data.Fin
open import Data.Empty
open import Data.Product
open import Data.Unit
open import Data.Bool renaming (Bool to ùîπ)
open import Level as Level using (0‚Ñì)
open import Function.Base as Function using ()
open import Data.Rational as ‚Ñö

open import MiniVehicle.Language.Syntax.Restriction
import MiniVehicle.Language.StandardSemantics as S
open S.Quant
open import MiniVehicle.LossFunctions.GenericDifferentiableLogic

lossRestriction : Restriction
lossRestriction = record
  { Restriction defaultRestriction
  ; IfRestriction = Œª _ ‚Üí ‚ä•
  }

open import MiniVehicle.Language.Model

module _ (dl : DifferentiableLogic) where

  open Model
  open DifferentiableLogic dl

  ‚Ñ≥ : Model lossRestriction (Level.suc 0‚Ñì) 0‚Ñì
  ‚Ñ≥ .‚ü¶Type‚üß = Set
  ‚Ñ≥ ._==>_ X Y = X ‚Üí Y
  ‚Ñ≥ .Flat X = X
  ‚Ñ≥ .elem a x = a
  ‚Ñ≥ .Flat-map f = f
  ‚Ñ≥ .‚ü¶id‚üß = Œª x ‚Üí x
  ‚Ñ≥ ._‚àò_ f g x = f (g x)
  ‚Ñ≥ ._‚ü¶√ó‚üß_ = _√ó_
  ‚Ñ≥ .‚ü¶proj‚ÇÅ‚üß = proj‚ÇÅ
  ‚Ñ≥ .‚ü¶proj‚ÇÇ‚üß = proj‚ÇÇ
  ‚Ñ≥ .‚ü®_,_‚ü© f g x = f x , g x
  ‚Ñ≥ ._‚ü¶‚áí‚üß_ X Y = X ‚Üí Y
  ‚Ñ≥ .‚ü¶Œõ‚üß f x y = f (x , y)
  ‚Ñ≥ .‚ü¶eval‚üß (f , x) = f x
  ‚Ñ≥ .‚ü¶‚àÄ‚üß A = ‚àÄ n ‚Üí A n
  ‚Ñ≥ .‚ü¶‚àÄ-intro‚üß f x n = f n x
  ‚Ñ≥ .‚ü¶‚àÄ-elim‚üß n f = f n
  ‚Ñ≥ .Mon X = X
  ‚Ñ≥ .‚ü¶return‚üß x = x
  ‚Ñ≥ .‚ü¶extend‚üß f = f
  ‚Ñ≥ .‚ü¶Num‚üß _ = ‚Ñö
  ‚Ñ≥ .‚ü¶add‚üß (_ , x , y)  = x ‚Ñö.+ y
  ‚Ñ≥ .‚ü¶mul‚üß (_ , x , y)  = x ‚Ñö.* y
  ‚Ñ≥ .‚ü¶const‚üß q _ = q
  ‚Ñ≥ .‚ü¶Bool‚üß U = ‚ü™Bool‚ü´
  ‚Ñ≥ .‚ü¶Bool‚üß Ex = S.Quant ‚ü™Bool‚ü´
  ‚Ñ≥ .‚ü¶not‚üß (U , x) = ‚ü™not‚ü´ x   -- swap
  ‚Ñ≥ .‚ü¶and‚üß (U-U , x , y) = x ‚ü™and‚ü´ y
  ‚Ñ≥ .‚ü¶and‚üß (U-Ex , x , y) = (return x) and y
  ‚Ñ≥ .‚ü¶and‚üß (Ex-U , x , y) = x and (return y)
  ‚Ñ≥ .‚ü¶and‚üß (Ex-Ex , x , y) = x and y
  ‚Ñ≥ .‚ü¶or‚üß (U-U , x , y) = x ‚ü™or‚ü´ y
  ‚Ñ≥ .‚ü¶or‚üß (U-Ex , x , y) = (return x) or y
  ‚Ñ≥ .‚ü¶or‚üß (Ex-U , x , y) = x or (return y)
  ‚Ñ≥ .‚ü¶or‚üß (Ex-Ex , x , y) = x or y
  ‚Ñ≥ .‚ü¶‚â§‚üß (U , x , y) = x ‚ü™‚â§‚ü´ y
  ‚Ñ≥ .‚ü¶<‚üß (U , x , y) = x ‚ü™<‚ü´ y
  ‚Ñ≥ .‚ü¶if‚üß ((tr , fa) , (() , _))
  ‚Ñ≥ .‚ü¶‚àÉ‚üß (U , f) = ex (Œª q ‚Üí return (f q))
  ‚Ñ≥ .‚ü¶‚àÉ‚üß (Ex , f) = ex f
   -- (‚Ñö‚Å∫‚àû √ó ‚Ñö‚Å∫‚àû)   -- (Encode ‚Ñö‚Å∫ as set of rationals greater than a given rational)
   -- (x+ , x-) ‚ü¶and‚üß (y+ , y-) = (x+ + y+, (y- - x+) /\ (x- - y+))
   -- (if true then (x ‚Ñö.- y , ‚àû) else (‚àû , x ‚Ñö.- y)

  open import MiniVehicle.Language.Interpretation lossRestriction ‚Ñ≥ as ‚Ñí
  open import MiniVehicle.Language.Syntax lossRestriction

  compile : ‚àÄ {t} ‚Üí Œµ / Œµ ‚ä¢ t ‚Üí ‚Ñí.‚ü¶ t ‚üßty _
  compile t = ‚Ñí.‚ü¶ t ‚üßtm _ tt
