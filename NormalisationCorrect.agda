{-# OPTIONS --postfix-projections #-}
module NormalisationCorrect where

open import MiniVehicle
open import norm-expr
import StandardSemantics as S
import Normalisation as N
open import Data.Bool renaming (Bool to ùîπ; if_then_else_ to if·µá_then_else_)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Unit using (‚ä§; tt)
open import Data.Rational using (‚Ñö; _+_; _*_; _‚â§·µá_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym)

-- worlds are now pairs of LinVarCtxts and Environments for them

record World : Set where
  constructor _,_
  field
    ctxt : LinVarCtxt
    env  : Env ctxt
open World

record _‚áíw_ (w‚ÇÅ w‚ÇÇ : World) : Set where
  field
    ren   : w‚ÇÅ .ctxt ‚áí·µ£ w‚ÇÇ .ctxt
    presv : ‚àÄ x ‚Üí w‚ÇÅ .env (ren x) ‚â° w‚ÇÇ .env x
open _‚áíw_

id-w : ‚àÄ {w} ‚Üí w ‚áíw w
id-w .ren x = x
id-w .presv x = refl

WRel : Set ‚Üí (LinVarCtxt ‚Üí Set) ‚Üí Set‚ÇÅ
WRel A B = ‚àÄ (w : World) ‚Üí A ‚Üí B (w .ctxt) ‚Üí Set

-- FIXME: move to norm-expr
extend-env : ‚àÄ {Œî} ‚Üí Env Œî ‚Üí ‚Ñö ‚Üí Env (Œî ,‚àô)
extend-env Œ∑ q zero     = q
extend-env Œ∑ q (succ x) = Œ∑ x

LetLiftR : ‚àÄ {A B} ‚Üí WRel A B ‚Üí WRel A (LetLift B)
LetLiftR R w a (return b) = R w a b
LetLiftR R w a (if c k‚ÇÅ k‚ÇÇ) =
  if·µá (eval-ConstraintExp c (w .env))
   then LetLiftR R w a k‚ÇÅ
   else LetLiftR R w a (k‚ÇÇ (Œª x ‚Üí x))
LetLiftR R w a (let-exp e k) =
  LetLiftR R ((w .ctxt ,‚àô) , extend-env (w .env) (eval-LinExp e (w .env))) a k

-- Does this need to be upgraded to be strong?
let-bindR : ‚àÄ {A A' B B'}{RA : WRel A A'}{RB : WRel B B'} w x y (f : A ‚Üí B) g ‚Üí
  LetLiftR RA w x y ‚Üí
  (‚àÄ w' (œÅ : w' ‚áíw w) a b ‚Üí RA w' a b ‚Üí LetLiftR RB w' (f a) (g (w' .ctxt) (œÅ .ren) b)) ‚Üí
  LetLiftR RB w (f x) (bind-let y g)
let-bindR w x (return y) f g r-xy r-fg = r-fg w id-w x y r-xy
let-bindR w x (if e y‚ÇÅ y‚ÇÇ) f g r-xy r-fg with eval-ConstraintExp e (w .env)
... | true  = let-bindR w x y‚ÇÅ f g r-xy r-fg
... | false = let-bindR w x (y‚ÇÇ (Œª x ‚Üí x)) f g r-xy r-fg
let-bindR w x (let-exp e y) f g r-xy r-fg =
  let-bindR
    ((w .ctxt ,‚àô) , extend-env (w .env) (eval-LinExp e (w .env)))
    x
    y
    f
    (Œª Œî' œÅ a' ‚Üí g Œî' (Œª x‚ÇÅ ‚Üí œÅ (succ x‚ÇÅ)) a')
    r-xy
    Œª w' œÅ a b r-ab ‚Üí
      r-fg
        w' (record { ren = Œª x‚ÇÅ ‚Üí œÅ .ren (succ x‚ÇÅ) ; presv = Œª x‚ÇÅ ‚Üí œÅ .presv (succ x‚ÇÅ) })
        a b r-ab
        -- FIXME: tidy up this 'record' bit

-- Relatedness for types
‚ü¶_‚üßty : ‚àÄ A ‚Üí WRel S.‚ü¶ A ‚üßty N.‚ü¶ A ‚üßty
‚ü¶ Bool constraint ‚üßty w x y = x ‚â° eval-ConstraintExp y (w .env)
‚ü¶ Num const ‚üßty       w x y = x ‚â° y
‚ü¶ Num linear ‚üßty      w x y = x ‚â° eval-LinExp y (w .env)
‚ü¶ A ‚áí B ‚üßty          w f g =
  ‚àÄ w' (œÅ : w' ‚áíw w) x y ‚Üí
    ‚ü¶ A ‚üßty w' x y ‚Üí
    LetLiftR ‚ü¶ B ‚üßty w' (f x) (g (w' .ctxt) (œÅ .ren) y)

-- FIXME: ‚ü¶_‚üßty is preserved by _‚áíw_

-- Relatedness for contexts
‚ü¶_‚üßctxt : ‚àÄ Œì ‚Üí WRel S.‚ü¶ Œì ‚üßctxt N.‚ü¶ Œì ‚üßctxt
‚ü¶ Œµ ‚üßctxt      w tt      tt       = ‚ä§
‚ü¶ Œì ,- A ‚üßctxt w (Œ≥‚Çõ , x) (Œ≥‚Çô , y) = ‚ü¶ Œì ‚üßctxt w Œ≥‚Çõ Œ≥‚Çô √ó ‚ü¶ A ‚üßty w x y

-- FIXME: ‚ü¶_‚üßctxt is preserved by _‚áíw_

‚ü¶_‚üßvar : ‚àÄ {Œì A} (x : Œì ‚àã A) w {Œ≥‚Çõ Œ≥‚Çô} ‚Üí
        ‚ü¶ Œì ‚üßctxt w Œ≥‚Çõ Œ≥‚Çô ‚Üí
        ‚ü¶ A ‚üßty w (S.‚ü¶ x ‚üßvar Œ≥‚Çõ) (N.‚ü¶ x ‚üßvar Œ≥‚Çô)
‚ü¶ zero ‚üßvar   w (_    , x-y) = x-y
‚ü¶ succ x ‚üßvar w (Œ≥‚Çõ-Œ≥‚Çô , _  ) = ‚ü¶ x ‚üßvar w Œ≥‚Çõ-Œ≥‚Çô

‚ü¶_‚üßtm : ‚àÄ {Œì A} (x : Œì ‚ä¢ A) w {Œ≥‚Çõ Œ≥‚Çô} ‚Üí
        ‚ü¶ Œì ‚üßctxt w Œ≥‚Çõ Œ≥‚Çô ‚Üí
        LetLiftR ‚ü¶ A ‚üßty w (S.‚ü¶ x ‚üßtm Œ≥‚Çõ) (N.‚ü¶ x ‚üßtm Œ≥‚Çô)
‚ü¶ var x ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = ‚ü¶ x ‚üßvar w Œ≥‚ÇÅ-Œ≥‚ÇÇ
‚ü¶ ∆õ t ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  -- FIXME: need preservation of context relatedness under world changes
  Œª w' œÅ x y x-y ‚Üí ‚ü¶ t ‚üßtm w' ({!!} , x-y)
‚ü¶ s ‚àô t ‚üßtm w {Œ≥‚Çõ}{Œ≥‚Çô} Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  let-bindR w (S.‚ü¶ s ‚üßtm Œ≥‚Çõ) (N.‚ü¶ s ‚üßtm Œ≥‚Çô)
    _ -- (Œª a ‚Üí a (S.‚ü¶ t ‚üßtm Œ≥‚Çõ))
    _
    (‚ü¶ s ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ)
    Œª w' œÅ a b r-ab ‚Üí
      let-bindR w' (S.‚ü¶ t ‚üßtm Œ≥‚Çõ) (N.‚ü¶ t ‚üßtm (N.rename-ctxt (œÅ .ren) Œ≥‚Çô))
        _ -- (Œª a' ‚Üí a a')
        _
        (‚ü¶ t ‚üßtm w' {!!})
        r-ab
‚ü¶ const x ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = refl
‚ü¶ lift t ‚üßtm w {Œ≥‚Çõ}{Œ≥‚Çô} Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  let-bindR w (S.‚ü¶ t ‚üßtm Œ≥‚Çõ) (N.‚ü¶ t ‚üßtm Œ≥‚Çô)
   (Œª a ‚Üí a)
   (Œª _ _ q ‚Üí return (const q))
   (‚ü¶ t ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ)
   Œª w' œÅ a b a‚â°b ‚Üí a‚â°b
‚ü¶ s `+ t ‚üßtm w {Œ≥‚Çõ}{Œ≥‚Çô} Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  let-bindR w (S.‚ü¶ s ‚üßtm Œ≥‚Çõ) (N.‚ü¶ s ‚üßtm Œ≥‚Çô)
    (Œª a ‚Üí a + S.‚ü¶ t ‚üßtm Œ≥‚Çõ)
    _
    (‚ü¶ s ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ)
    Œª w' œÅ a b r-ab ‚Üí
      let-bindR w' (S.‚ü¶ t ‚üßtm Œ≥‚Çõ) (N.‚ü¶ t ‚üßtm (N.rename-ctxt (œÅ .ren) Œ≥‚Çô))
        (Œª b ‚Üí a + b)
        _
        (‚ü¶ t ‚üßtm w' {!!}) -- FIXME: context relatedness preserved under extension
        {!!} -- FIXME: preservation of evaluation
‚ü¶ s `* t ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = {!!}
‚ü¶ s `‚â§ t ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = {!!}
‚ü¶ if s then t else u ‚üßtm w {Œ≥‚Çõ}{Œ≥‚Çô} Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  let-bindR w (S.‚ü¶ s ‚üßtm Œ≥‚Çõ) (N.‚ü¶ s ‚üßtm Œ≥‚Çô)
    (Œª a ‚Üí if·µá a then S.‚ü¶ t ‚üßtm Œ≥‚Çõ else S.‚ü¶ u ‚üßtm Œ≥‚Çõ)
    _
    (‚ü¶ s ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ)
    r
  where r : ‚àÄ w' (œÅ : w' ‚áíw w) a b ‚Üí
            ‚ü¶ Bool constraint ‚üßty w' a b ‚Üí
            LetLiftR ‚ü¶ _ ‚üßty w'
              (if·µá a then S.‚ü¶ t ‚üßtm Œ≥‚Çõ else S.‚ü¶ u ‚üßtm Œ≥‚Çõ)
              (if b (N.‚ü¶ t ‚üßtm (N.rename-ctxt (œÅ .ren) Œ≥‚Çô))
                    (Œª œÅ' ‚Üí N.‚ü¶ u ‚üßtm (N.rename-ctxt (œÅ .ren ‚àò œÅ') Œ≥‚Çô)))
        r w' œÅ false b eq rewrite sym eq = ‚ü¶ u ‚üßtm w' {!!}
        r w' œÅ true b eq rewrite sym eq = ‚ü¶ t ‚üßtm w' {!!}
‚ü¶ `¬¨ t ‚üßtm w {Œ≥‚Çõ}{Œ≥‚Çô} Œ≥‚ÇÅ-Œ≥‚ÇÇ =
  let-bindR w (S.‚ü¶ t ‚üßtm Œ≥‚Çõ) (N.‚ü¶ t ‚üßtm Œ≥‚Çô)
    not
    (Œª _ _ x ‚Üí return (negate x))
    (‚ü¶ t ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ)
    Œª { w' œÅ a b refl ‚Üí {!!} } -- FIXME: negate works correctly
‚ü¶ t `‚àß t‚ÇÅ ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = {!!}
‚ü¶ t `‚à® t‚ÇÅ ‚üßtm w Œ≥‚ÇÅ-Œ≥‚ÇÇ = {!!}
  -- FIXME: lemmas for unary and binary operators
  -- FIXME: would be easier to uncurry and have a lift2 operation:
  ---   lift2 : (A √ó B ‚áí‚Çñ C) ‚Üí LetLift A ‚Üí LetLift B ‚Üí LetLift C
