{-# OPTIONS --postfix-projections --safe #-}

module StandardSemantics where

open import Data.Bool using (true; false; _‚àß_; _‚à®_; not)
                   renaming (Bool to ùîπ; if_then_else_ to if·µá_then_else_)
open import Data.Product using (_√ó_; _,_)
open import Data.Rational using (‚Ñö; _‚â§·µá_) renaming (_+_ to _+‚Ñö_; _*_ to _*‚Ñö_)
open import Data.Unit using (‚ä§; tt)

open import MiniVehicle

‚ü¶_‚üßty : Type ‚Üí Set
‚ü¶ Bool constraint ‚üßty = ùîπ
‚ü¶ Num x ‚üßty           = ‚Ñö
‚ü¶ A ‚áí B ‚üßty          = ‚ü¶ A ‚üßty ‚Üí ‚ü¶ B ‚üßty

‚ü¶_‚üßctxt : Context ‚Üí Set
‚ü¶ Œµ ‚üßctxt      = ‚ä§
‚ü¶ Œì ,- A ‚üßctxt = ‚ü¶ Œì ‚üßctxt √ó ‚ü¶ A ‚üßty

‚ü¶_‚üßvar : ‚àÄ {Œì A} ‚Üí Œì ‚àã A ‚Üí ‚ü¶ Œì ‚üßctxt ‚Üí ‚ü¶ A ‚üßty
‚ü¶ zero ‚üßvar   (_ , a) = a
‚ü¶ succ x ‚üßvar (Œ≥ , _) = ‚ü¶ x ‚üßvar Œ≥

module TermSem (f : ‚Ñö ‚Üí ‚Ñö) where

  ‚ü¶_‚üßtm : ‚àÄ {Œì A} ‚Üí Œì ‚ä¢ A ‚Üí ‚ü¶ Œì ‚üßctxt ‚Üí ‚ü¶ A ‚üßty
  ‚ü¶ var x ‚üßtm Œ≥ = ‚ü¶ x ‚üßvar Œ≥
  ‚ü¶ ∆õ t ‚üßtm Œ≥ = Œª a ‚Üí ‚ü¶ t ‚üßtm (Œ≥ , a)
  ‚ü¶ s ‚àô t ‚üßtm Œ≥ = ‚ü¶ s ‚üßtm Œ≥ (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ func t ‚üßtm Œ≥ = f (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ const x ‚üßtm Œ≥ = x
  ‚ü¶ lift t ‚üßtm Œ≥ = ‚ü¶ t ‚üßtm Œ≥
  ‚ü¶ s `+ t ‚üßtm Œ≥ = (‚ü¶ s ‚üßtm Œ≥) +‚Ñö (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ s `* t ‚üßtm Œ≥ = (‚ü¶ s ‚üßtm Œ≥) *‚Ñö (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ s `‚â§ t ‚üßtm Œ≥  = (‚ü¶ s ‚üßtm Œ≥) ‚â§·µá (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ if s then t else u ‚üßtm Œ≥ = if·µá (‚ü¶ s ‚üßtm Œ≥) then (‚ü¶ t ‚üßtm Œ≥) else (‚ü¶ u ‚üßtm Œ≥)
  ‚ü¶ `¬¨ t ‚üßtm Œ≥ = not (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ s `‚àß t ‚üßtm Œ≥ = (‚ü¶ s ‚üßtm Œ≥) ‚àß (‚ü¶ t ‚üßtm Œ≥)
  ‚ü¶ s `‚à® t ‚üßtm Œ≥ = (‚ü¶ s ‚üßtm Œ≥) ‚à® (‚ü¶ t ‚üßtm Œ≥)
